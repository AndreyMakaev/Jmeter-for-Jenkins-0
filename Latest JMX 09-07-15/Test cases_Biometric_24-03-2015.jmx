<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.7" jmeter="2.12 r1636949">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="TEST PLAN EXAMPLES V.2" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="EXAMPLE User Defined Variables" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="Authorization" elementType="Argument">
            <stringProp name="Argument.name">Authorization</stringProp>
            <stringProp name="Argument.value">kdQiii6ljQ09yEUocgUnGgK50lO2nuW9XPKIGklQrJn4mAmYdSFutbZJtcyHE7pVOwqrdm637XEmPU0flsXCpbQS8RGDTqSdLyjmpRgV1:ODg0YTcxMGYtODhiOS00Y2Q5LWExNjMtMTYzYTgwYmVkOTdi</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Static authorization token</stringProp>
          </elementProp>
          <elementProp name="sessionKey" elementType="Argument">
            <stringProp name="Argument.name">sessionKey</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Variable session key </stringProp>
          </elementProp>
          <elementProp name="userpath" elementType="Argument">
            <stringProp name="Argument.name">userpath</stringProp>
            <stringProp name="Argument.value">/BiometricUserService</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Parameterized part of URL</stringProp>
          </elementProp>
          <elementProp name="servicepath" elementType="Argument">
            <stringProp name="Argument.name">servicepath</stringProp>
            <stringProp name="Argument.value">/BiometricEventService</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Parameterized part of URL</stringProp>
          </elementProp>
          <elementProp name="screeningpath" elementType="Argument">
            <stringProp name="Argument.name">screeningpath</stringProp>
            <stringProp name="Argument.value">/BiometricScreeningService</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Parameterized part of URL</stringProp>
          </elementProp>
          <elementProp name="memberpath" elementType="Argument">
            <stringProp name="Argument.name">memberpath</stringProp>
            <stringProp name="Argument.value">/BiometricMemberService</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Parameterized part of URL</stringProp>
          </elementProp>
          <elementProp name="EventID" elementType="Argument">
            <stringProp name="Argument.name">EventID</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="StaffID" elementType="Argument">
            <stringProp name="Argument.name">StaffID</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FirstName" elementType="Argument">
            <stringProp name="Argument.name">FirstName</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LastName" elementType="Argument">
            <stringProp name="Argument.name">LastName</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UserName" elementType="Argument">
            <stringProp name="Argument.name">UserName</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Email" elementType="Argument">
            <stringProp name="Argument.name">Email</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Login" elementType="Argument">
            <stringProp name="Argument.name">Login</stringProp>
            <stringProp name="Argument.value">/BiometricAuthenticationService/Authenticate/usernameBase64/RXVnZW5l/passwordBase64/VGVtcEAxMjM=</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Login as admin</stringProp>
          </elementProp>
          <elementProp name="MemberKey" elementType="Argument">
            <stringProp name="Argument.name">MemberKey</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Authorization2" elementType="Argument">
            <stringProp name="Argument.name">Authorization2</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NewEvent" elementType="Argument">
            <stringProp name="Argument.name">NewEvent</stringProp>
            <stringProp name="Argument.value">{&quot;OpenTime&quot;:&quot;2014-10-21T09:00:00.00&quot;,&quot;CloseTime&quot;:&quot;2014-10-21T21:00:00.00&quot;,&quot;IsOpen&quot;:1,&quot;OrderingPhysicianID&quot;:97,&quot;ReferringPhysicianID&quot;:94,&quot;OrganizationUnitID&quot;:4,&quot;EventDate&quot;:&quot;2014-10-21T12:00:00.00&quot;,&quot;LocationID&quot;:47,&quot;EventTypeID&quot;:4,&quot;IntervalTimeID&quot;:5,&quot;EventName&quot;:&quot;JM2 testing commercial&quot;,&quot;EventDescription&quot;:&quot;Jm&quot;,&quot;MaxRegistrationsForInterval&quot;:2}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Create new event</stringProp>
          </elementProp>
          <elementProp name="MemberScreeningID" elementType="Argument">
            <stringProp name="Argument.name">MemberScreeningID</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NewEventMed" elementType="Argument">
            <stringProp name="Argument.name">NewEventMed</stringProp>
            <stringProp name="Argument.value">{&quot;OpenTime&quot;:&quot;2014-10-21T09:00:00.00&quot;,&quot;CloseTime&quot;:&quot;2014-10-21T21:00:00.00&quot;,&quot;IsOpen&quot;:1,&quot;OrderingPhysicianID&quot;:null,&quot;ReferringPhysicianID&quot;:null,&quot;OrganizationUnitID&quot;:1,&quot;EventDate&quot;:&quot;2014-10-21T12:00:00.00&quot;,&quot;LocationID&quot;:47,&quot;EventTypeID&quot;:1,&quot;IntervalTimeID&quot;:5,&quot;EventName&quot;:&quot;MEDICARE PROGRAM&quot;,&quot;EventDescription&quot;:&quot;MEDICARE&quot;,&quot;MaxRegistrationsForInterval&quot;:2}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Create new event</stringProp>
          </elementProp>
          <elementProp name="NewEventFit" elementType="Argument">
            <stringProp name="Argument.name">NewEventFit</stringProp>
            <stringProp name="Argument.value">{&quot;OpenTime&quot;:&quot;2014-10-21T09:00:00.00&quot;,&quot;CloseTime&quot;:&quot;2014-10-21T21:00:00.00&quot;,&quot;IsOpen&quot;:1,&quot;OrderingPhysicianID&quot;:null,&quot;ReferringPhysicianID&quot;:null,&quot;OrganizationUnitID&quot;:6,&quot;EventDate&quot;:&quot;2014-10-21T12:00:00.00&quot;,&quot;LocationID&quot;:6,&quot;EventTypeID&quot;:1,&quot;IntervalTimeID&quot;:5,&quot;EventName&quot;:&quot;FITNESS PROGRAM&quot;,&quot;EventDescription&quot;:&quot;FITNESS&quot;,&quot;MaxRegistrationsForInterval&quot;:2} </stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Create new event</stringProp>
          </elementProp>
          <elementProp name="LoginStaff" elementType="Argument">
            <stringProp name="Argument.name">LoginStaff</stringProp>
            <stringProp name="Argument.value">/BiometricAuthenticationService/Authenticate/usernameBase64/Sm9lbmVsc29u/passwordBase64/VGVtcEAxMjM=</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Login as user (no admin rights)</stringProp>
          </elementProp>
          <elementProp name="IncorrectLogin" elementType="Argument">
            <stringProp name="Argument.name">IncorrectLogin</stringProp>
            <stringProp name="Argument.value">/BiometricAuthenticationService/Authenticate/usernameBase64/QW5kcmV5/passwordBase64/VGVtcEAxMjM=</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Incorrect login (correct name, incorrect password)</stringProp>
          </elementProp>
          <elementProp name="IncorrectLogin2" elementType="Argument">
            <stringProp name="Argument.name">IncorrectLogin2</stringProp>
            <stringProp name="Argument.value">/BiometricAuthenticationService/Authenticate/usernameBase64/QW5kcmV5/passwordBase64/VMVtcEAxQAjM=</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Incorrect login (incorrect name, incorrect password)</stringProp>
          </elementProp>
          <elementProp name="Protocol" elementType="Argument">
            <stringProp name="Argument.name">Protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TestServer" elementType="Argument">
            <stringProp name="Argument.name">TestServer</stringProp>
            <stringProp name="Argument.value">biomtst.upmchp.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Port" elementType="Argument">
            <stringProp name="Argument.name">Port</stringProp>
            <stringProp name="Argument.value">443</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ProdServer" elementType="Argument">
            <stringProp name="Argument.name">ProdServer</stringProp>
            <stringProp name="Argument.value">biom.upmchp.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Name_1" elementType="Argument">
            <stringProp name="Argument.name">Name_1</stringProp>
            <stringProp name="Argument.value">COSTA</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Name_2" elementType="Argument">
            <stringProp name="Argument.name">Name_2</stringProp>
            <stringProp name="Argument.value">DAVIS</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Name_3" elementType="Argument">
            <stringProp name="Argument.name">Name_3</stringProp>
            <stringProp name="Argument.value">JOHNSON</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Name_4" elementType="Argument">
            <stringProp name="Argument.name">Name_4</stringProp>
            <stringProp name="Argument.value">SO</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NewEventMed2" elementType="Argument">
            <stringProp name="Argument.name">NewEventMed2</stringProp>
            <stringProp name="Argument.value">{&quot;OpenTime&quot;: &quot;2014-10-21T09:00:00.00&quot;,     &quot;CloseTie&quot;: &quot;2014-10-21T21:00:00.00&quot;,     &quot;IsOpen&quot;: 1,     &quot;OrderingPhysicianID&quot;: null,     &quot;ReferringPhysicianID&quot;: null,     &quot;OrganizationUnitID&quot;: 1,     &quot;EventDate&quot;: &quot;2014-10-21T12:00:00.00&quot;,     &quot;LocationID&quot;: 47,     &quot;EventTypeID&quot;: 1,     &quot;IntervalTimeID&quot;: 5,     &quot;EventName&quot;: &quot;MEDICARE PROGRAMS 4&quot;,     &quot;EventDescription&quot;: &quot;MEDICARE&quot;,     &quot;MaxRegistrationsForInterval&quot;: 2222222222}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="Authorization" elementType="Argument">
            <stringProp name="Argument.name">Authorization</stringProp>
            <stringProp name="Argument.value">kdQiii6ljQ09yEUocgUnGgK50lO2nuW9XPKIGklQrJn4mAmYdSFutbZJtcyHE7pVOwqrdm637XEmPU0flsXCpbQS8RGDTqSdLyjmpRgV1:ODg0YTcxMGYtODhiOS00Y2Q5LWExNjMtMTYzYTgwYmVkOTdi</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Static authorization token</stringProp>
          </elementProp>
          <elementProp name="sessionKey" elementType="Argument">
            <stringProp name="Argument.name">sessionKey</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Variable session key </stringProp>
          </elementProp>
          <elementProp name="userpath" elementType="Argument">
            <stringProp name="Argument.name">userpath</stringProp>
            <stringProp name="Argument.value">/BiometricUserService</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Parameterized part of URL</stringProp>
          </elementProp>
          <elementProp name="servicepath" elementType="Argument">
            <stringProp name="Argument.name">servicepath</stringProp>
            <stringProp name="Argument.value">/BiometricEventService</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Parameterized part of URL</stringProp>
          </elementProp>
          <elementProp name="screeningpath" elementType="Argument">
            <stringProp name="Argument.name">screeningpath</stringProp>
            <stringProp name="Argument.value">/BiometricScreeningService</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Parameterized part of URL</stringProp>
          </elementProp>
          <elementProp name="memberpath" elementType="Argument">
            <stringProp name="Argument.name">memberpath</stringProp>
            <stringProp name="Argument.value">/BiometricMemberService</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Parameterized part of URL</stringProp>
          </elementProp>
          <elementProp name="EventID" elementType="Argument">
            <stringProp name="Argument.name">EventID</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="StaffID" elementType="Argument">
            <stringProp name="Argument.name">StaffID</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FirstName" elementType="Argument">
            <stringProp name="Argument.name">FirstName</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LastName" elementType="Argument">
            <stringProp name="Argument.name">LastName</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UserName" elementType="Argument">
            <stringProp name="Argument.name">UserName</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Email" elementType="Argument">
            <stringProp name="Argument.name">Email</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Login" elementType="Argument">
            <stringProp name="Argument.name">Login</stringProp>
            <stringProp name="Argument.value">/BiometricAuthenticationService/Authenticate/usernameBase64/RXVnZW5l/passwordBase64/VGVtcEAxMjM=</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Login as admin</stringProp>
          </elementProp>
          <elementProp name="MemberKey" elementType="Argument">
            <stringProp name="Argument.name">MemberKey</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Authorization2" elementType="Argument">
            <stringProp name="Argument.name">Authorization2</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NewEvent" elementType="Argument">
            <stringProp name="Argument.name">NewEvent</stringProp>
            <stringProp name="Argument.value">{&quot;OpenTime&quot;:&quot;2014-10-21T09:00:00.00&quot;,&quot;CloseTime&quot;:&quot;2014-10-21T21:00:00.00&quot;,&quot;IsOpen&quot;:1,&quot;OrderingPhysicianID&quot;:97,&quot;ReferringPhysicianID&quot;:94,&quot;OrganizationUnitID&quot;:4,&quot;EventDate&quot;:&quot;2014-10-21T12:00:00.00&quot;,&quot;LocationID&quot;:47,&quot;EventTypeID&quot;:4,&quot;IntervalTimeID&quot;:5,&quot;EventName&quot;:&quot;JM2 testing commercial&quot;,&quot;EventDescription&quot;:&quot;Jm&quot;,&quot;MaxRegistrationsForInterval&quot;:2}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Create new event</stringProp>
          </elementProp>
          <elementProp name="MemberScreeningID" elementType="Argument">
            <stringProp name="Argument.name">MemberScreeningID</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NewEventMed" elementType="Argument">
            <stringProp name="Argument.name">NewEventMed</stringProp>
            <stringProp name="Argument.value">{&quot;OpenTime&quot;:&quot;2014-10-21T09:00:00.00&quot;,&quot;CloseTime&quot;:&quot;2014-10-21T21:00:00.00&quot;,&quot;IsOpen&quot;:1,&quot;OrderingPhysicianID&quot;:null,&quot;ReferringPhysicianID&quot;:null,&quot;OrganizationUnitID&quot;:1,&quot;EventDate&quot;:&quot;2014-10-21T12:00:00.00&quot;,&quot;LocationID&quot;:47,&quot;EventTypeID&quot;:1,&quot;IntervalTimeID&quot;:5,&quot;EventName&quot;:&quot;MEDICARE PROGRAM&quot;,&quot;EventDescription&quot;:&quot;MEDICARE&quot;,&quot;MaxRegistrationsForInterval&quot;:2}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Create new event</stringProp>
          </elementProp>
          <elementProp name="NewEventFit" elementType="Argument">
            <stringProp name="Argument.name">NewEventFit</stringProp>
            <stringProp name="Argument.value">{&quot;OpenTime&quot;:&quot;2014-10-21T09:00:00.00&quot;,&quot;CloseTime&quot;:&quot;2014-10-21T21:00:00.00&quot;,&quot;IsOpen&quot;:1,&quot;OrderingPhysicianID&quot;:null,&quot;ReferringPhysicianID&quot;:null,&quot;OrganizationUnitID&quot;:6,&quot;EventDate&quot;:&quot;2014-10-21T12:00:00.00&quot;,&quot;LocationID&quot;:6,&quot;EventTypeID&quot;:1,&quot;IntervalTimeID&quot;:5,&quot;EventName&quot;:&quot;FITNESS PROGRAM&quot;,&quot;EventDescription&quot;:&quot;FITNESS&quot;,&quot;MaxRegistrationsForInterval&quot;:2} </stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Create new event</stringProp>
          </elementProp>
          <elementProp name="LoginStaff" elementType="Argument">
            <stringProp name="Argument.name">LoginStaff</stringProp>
            <stringProp name="Argument.value">/BiometricAuthenticationService/Authenticate/usernameBase64/Sm9lbmVsc29u/passwordBase64/VGVtcEAxMjM=</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Login as user (no admin rights)</stringProp>
          </elementProp>
          <elementProp name="IncorrectLogin" elementType="Argument">
            <stringProp name="Argument.name">IncorrectLogin</stringProp>
            <stringProp name="Argument.value">/BiometricAuthenticationService/Authenticate/usernameBase64/QW5kcmV5/passwordBase64/VGVtcEAxMjM=</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Incorrect login (correct name, incorrect password)</stringProp>
          </elementProp>
          <elementProp name="IncorrectLogin2" elementType="Argument">
            <stringProp name="Argument.name">IncorrectLogin2</stringProp>
            <stringProp name="Argument.value">/BiometricAuthenticationService/Authenticate/usernameBase64/QW5kcmV5/passwordBase64/VMVtcEAxQAjM=</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Incorrect login (incorrect name, incorrect password)</stringProp>
          </elementProp>
          <elementProp name="Protocol" elementType="Argument">
            <stringProp name="Argument.name">Protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TestServer" elementType="Argument">
            <stringProp name="Argument.name">TestServer</stringProp>
            <stringProp name="Argument.value">biomtst.upmchp.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Port" elementType="Argument">
            <stringProp name="Argument.name">Port</stringProp>
            <stringProp name="Argument.value">443</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ProdServer" elementType="Argument">
            <stringProp name="Argument.name">ProdServer</stringProp>
            <stringProp name="Argument.value">biom.upmchp.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Authorization</stringProp>
            <stringProp name="Header.value">${Authorization}:${sessionKey}</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Test server URL" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${TestServer}</stringProp>
        <stringProp name="HTTPSampler.port">${Port}</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="TestPlan.comments">Test server</stringProp>
        <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Production server URL" enabled="false">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${ProdServer}</stringProp>
        <stringProp name="HTTPSampler.port">${Port}</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="TestPlan.comments">Production server</stringProp>
        <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <objProp>
          <name></name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="EXAMPLE - Search members" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1424728647000</longProp>
        <longProp name="ThreadGroup.end_time">1424728647000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${Login}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Getting authorization key for the next steps</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;sessionKey&quot;, serializedJSONBody.SessionKey);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1037686455">Invalid Username or password</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
          <stringProp name="ForeachController.inputVal">Name</stringProp>
          <stringProp name="ForeachController.returnVal">SearchLastName</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Members ${SearchLastName}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="LastName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">LastName</stringProp>
                  <stringProp name="Argument.value">${SearchLastName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${memberpath}/Search/HPMembers</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">Поиск мемберов, сравнение значения переменных с применением RegEx</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Variables comparing (BSF PostProcessor)" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());	
var Members = JSON.parse(json.serializedJSONBody); 	
var SearchLastName = vars.get(&quot;SearchLastName&quot;)
vars.put(&quot;DEBUG_Members&quot;, JSON.stringify(Members));

var Random = vars.get(&quot;SearchLastName&quot;);

var LastNames = []; 								 
for(var i in Members) {						 
	var Member = Members[i];
	var expr = new RegExp(Random, &apos;i&apos;); 
		if(Member.LastName.search(expr) == -1) {
	LastNames.push(Members[i].LastName);			
	}
}
vars.put(&quot;DEBUG_LastNames&quot;, JSON.stringify(LastNames));
vars.put(&quot;DEBUG_Member&quot;, Member.LastName);


if (LastNames.length == 0) {  
       prev.setSuccessful(true);    
	  prev.setResponseMessage(&quot;SERVER SENDS CORRECT RESPONSES&quot;); 

}
else {
 	  prev.setSuccessful(false);
 	  prev.setResponseMessage(&quot;SERVER SENDS INCORRECT RESPONSES&quot;);
}</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="EXAMPLE - event creation" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1424728647000</longProp>
        <longProp name="ThreadGroup.end_time">1424728647000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${Login}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Getting authorization key for the next steps</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;sessionKey&quot;, serializedJSONBody.SessionKey);
vars.put (&quot;FirstName&quot;, serializedJSONBody.FirstName);


var FirstName = vars.get(&quot;FirstName&quot;)
if (FirstName == &apos;Eugene&apos;) {  
       prev.setSuccessful(true);      			
	  prev.setResponseMessage(&quot;User was logged in successfully&quot;);

}
else {
 	  prev.setResponseMessage(&quot;Something goes wrong&quot;);
} 
</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create new event" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${NewEventFit}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/Event/Add?</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">It&apos;s possible to create events assigned to different organizations. Use next defined  variables: ${NewEventFit} (Fitness event), ${NewEventMed} (Medicare event), ${NewEvent} (Commercial event) </stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;EventID&quot;, serializedJSONBody.EventID);
vars.put(&quot;EventName&quot;, serializedJSONBody.EventName);


var EventName = vars.get(&quot;EventName&quot;) 
if (EventName != null) {  
	prev.setSuccessful(true);      			
	prev.setResponseMessage(&quot;Event was created successfully&quot;);

}
else {
 	  prev.setResponseMessage(&quot;Something goes wrong&quot;);
} </stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Available Screenings List for Event  ${EventID}, ${EventName}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${screeningpath}/AvailableScreeningList/Event/${EventID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Show ScreeningNames" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());	
var ScreeningNames = JSON.parse(json.serializedJSONBody);

vars.putObject(&quot;ScreeningNames&quot;, ScreeningNames);		  

var Names = [];
for(var i in ScreeningNames) {
		Names.push(ScreeningNames[i].ScreeningName);		
}
Names.sort();
vars.put(&quot;Debug_ScreeningNames&quot;, JSON.stringify(Names));   
var Response = vars.get(&quot;Debug_ScreeningNames&quot;)


//&quot;Blood Pressure&quot;,&quot;Body Fat&quot;,&quot;Body Mass Index&quot;,&quot;Cardiovascular Fitness&quot;,&quot;Flexibility&quot;,&quot;Health Questionnaire&quot;,&quot;Muscular Strength&quot;,&quot;Resting Heart Rate&quot;,&quot;Waist Measurement&quot;

</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Считываем названия скринингов из респонса, выводим в</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Checking all available screenings are present" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1112568588">&quot;Health Questionnaire&quot;,&quot;Resting Heart Rate&quot;,&quot;Body Fat&quot;,&quot;Blood Pressure&quot;,&quot;Body Mass Index&quot;,&quot;Waist Measurement&quot;,&quot;Muscular Strength&quot;,&quot;Cardiovascular Fitness&quot;,&quot;Flexibility&quot;</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">Проверяем, что содержаться все доступные названия обследований</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Assign screenings to Fitness  Event" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[{&quot;ScreeningID&quot;:16,&quot;Description&quot;:&quot;Health Questionnaire&quot;,&quot;ScreeningName&quot;:&quot;Health Questionnaire&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:0},{&quot;ScreeningID&quot;:17,&quot;Description&quot;:&quot;Resting Heart Rate&quot;,&quot;ScreeningName&quot;:&quot;Resting Heart Rate&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:1},{&quot;ScreeningID&quot;:18,&quot;Description&quot;:&quot;Body Fat&quot;,&quot;ScreeningName&quot;:&quot;Body Fat&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:2},{&quot;ScreeningID&quot;:19,&quot;Description&quot;:&quot;Blood Pressure&quot;,&quot;ScreeningName&quot;:&quot;Blood Pressure&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:3},{&quot;ScreeningID&quot;:20,&quot;Description&quot;:&quot;Body Mass Index&quot;,&quot;ScreeningName&quot;:&quot;Body Mass Index&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:4},{&quot;ScreeningID&quot;:21,&quot;Description&quot;:&quot;Waist Measurement&quot;,&quot;ScreeningName&quot;:&quot;Waist Measurement&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:5},{&quot;ScreeningID&quot;:22,&quot;Description&quot;:&quot;Muscular Strength&quot;,&quot;ScreeningName&quot;:&quot;Muscular Strength&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:6},{&quot;ScreeningID&quot;:23,&quot;Description&quot;:&quot;Cardiovascular Fitness&quot;,&quot;ScreeningName&quot;:&quot;Cardiovascular Fitness&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:7},{&quot;ScreeningID&quot;:24,&quot;Description&quot;:&quot;Flexibility Fitness&quot;,&quot;ScreeningName&quot;:&quot;Flexibility&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:8}]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/AssignScreeningsToEvent/EventId/${EventID}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="544818101">Access is denied</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1373468489">EventScreeningID</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Assign screenings to Medicare Event" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[{&quot;ScreeningID&quot;:1,&quot;Description&quot;:&quot;Blood Work&quot;,&quot;ScreeningName&quot;:&quot;Blood Work&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:0},{&quot;ScreeningID&quot;:2,&quot;Description&quot;:&quot;Body Mass Index&quot;,&quot;ScreeningName&quot;:&quot;Body Mass Index&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:1},{&quot;ScreeningID&quot;:3,&quot;Description&quot;:&quot;Blood Pressure&quot;,&quot;ScreeningName&quot;:&quot;Blood Pressure&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:2},{&quot;ScreeningID&quot;:4,&quot;Description&quot;:&quot;Bone Mineral Density&quot;,&quot;ScreeningName&quot;:&quot;Bone Mineral Density&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:3},{&quot;ScreeningID&quot;:5,&quot;Description&quot;:&quot;Spirometry&quot;,&quot;ScreeningName&quot;:&quot;Spirometry&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:4},{&quot;ScreeningID&quot;:6,&quot;Description&quot;:&quot;Retinal Eye Exam&quot;,&quot;ScreeningName&quot;:&quot;Retinal Eye Exam&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:5}]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/AssignScreeningsToEvent/EventId/${EventID}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="544818101">Access is denied</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1373468489">EventScreeningID</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Assign screenings to Commercial Event" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[{&quot;ScreeningID&quot;:7,&quot;Description&quot;:&quot;Cholesterol&quot;,&quot;ScreeningName&quot;:&quot;Cholesterol&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:0},{&quot;ScreeningID&quot;:8,&quot;Description&quot;:&quot;Expected Results&quot;,&quot;ScreeningName&quot;:&quot;Expected Results&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:1},{&quot;ScreeningID&quot;:9,&quot;Description&quot;:&quot;Expected Results&quot;,&quot;ScreeningName&quot;:&quot;Glucose&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:2},{&quot;ScreeningID&quot;:10,&quot;Description&quot;:&quot;Glucose Note List&quot;,&quot;ScreeningName&quot;:&quot;Hemoglobin&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:3},{&quot;ScreeningID&quot;:11,&quot;Description&quot;:&quot;Nephropathy&quot;,&quot;ScreeningName&quot;:&quot;Nephropathy&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:4},{&quot;ScreeningID&quot;:12,&quot;Description&quot;:&quot;Body Mass Index&quot;,&quot;ScreeningName&quot;:&quot;Body Mass Index&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:5},{&quot;ScreeningID&quot;:13,&quot;Description&quot;:&quot;Blood Pressure&quot;,&quot;ScreeningName&quot;:&quot;Blood Pressure&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:6},{&quot;ScreeningID&quot;:14,&quot;Description&quot;:&quot;Bone Mineral Density&quot;,&quot;ScreeningName&quot;:&quot;Bone Mineral Density&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:7},{&quot;ScreeningID&quot;:15,&quot;Description&quot;:&quot;Spirometry&quot;,&quot;ScreeningName&quot;:&quot;Spirometry&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:8}]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/AssignScreeningsToEvent/EventId/${EventID}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="544818101">Access is denied</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1373468489">EventScreeningID</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Existing Staff List for Event " enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/ExistingStaffList/Event/${EventID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Available Staff List for Event" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/AvailableStaffList/Event/${EventID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Получаем весь список персонала для ивента</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Creating variable for adding all the Staff to Event at once" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());   // получаем данные в виде строки
var objects = JSON.parse(json.serializedJSONBody);      // парсинг Json-респонса
var eventId = vars.get(&quot;EventID&quot;);                      //объявляем переменную eventId для дальнейшего добавления в тело запроса

var ids = []; 								  		//создаем массив
for(var i in objects) {						  		// i - ключ массива, перебираем все значения по порядку
	ids.push(objects[i].StaffID);		  				//Помещаем переменную StaffID в массив объектов (для каждого объекта) 
}



for(var i in objects) {						  		// i - ключ массива, перебираем все значения по порядку
	objects[i].EventID = eventId * 1;		  			//Помещаем значение переменной EventID в массив, умножение на 1 превращает строку в число
}
vars.put(&quot;AssignStaffsRequest&quot;, JSON.stringify(objects)); //объявляем переменную AssignStaffsRequest для следующего запроса. Получаем ее в виде строки.</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Создаем переменную, содержащую всю информацию о персонале, используем ее для добавления всех доступных сотрудников к определенному ивенту</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Show all Staff IDs" enabled="true">
            <stringProp name="TestPlan.comments">Создаем массив содержащий все айдишники персонала</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);

var ids = []; 								  	//создаем массив
for(var i in objects) {						  	// i - ключ массива, перебираем все значения по порядку
	ids.push(objects[i].StaffID);				//Помещаем переменную в массив, то есть создаем массив со значениями всех StaffID	
}

vars.put(&quot;DEBUG_StaffIDs&quot;, JSON.stringify(ids));         // вывод в дебаггер
vars.putObject(&quot;StaffIDs&quot;, ids);					// инициализация объекта EventIDs, для следующего запроса

</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Show Staff Full names" enabled="true">
            <stringProp name="TestPlan.comments">Создаем массив содержащий все имена персонала</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);

var StaffNames = []; 								  	//создаем массив
for(var i in objects) {						  	// i - ключ массива, перебираем все значения по порядку
	StaffNames.push(objects[i].FullName);				//Помещаем переменную в массив, то есть создаем массив со значениями всех FullName
}

vars.put(&quot;DEBUG_FullNames&quot;, JSON.stringify(StaffNames));       // вывод в дебаггер
vars.putObject(&quot;StaffNames&quot;, StaffNames);					// инициализация объекта EventIDs, для следующего запроса

</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-232903717">StaffID</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Assign Staffs To Event (Add All existing staffs to event) ${EventID} , ${EventName}" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${AssignStaffsRequest}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/AssignStaffsToEvent/EventId/${EventID}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">The request contains only StaffID</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Assign Random StaffsID :${randomStaffID}, ${randomStaffName} To Event: ${EventID} , ${EventName}" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[{&quot;StaffID&quot;:${randomStaffID},&quot;FirstName&quot;:&quot;&quot;,&quot;LastName&quot;:&quot;&quot;,&quot;MiddleName&quot;:&quot;&quot;,&quot;FullName&quot;:&quot;&quot;,&quot;OrganizationUnitID&quot;:0,&quot;OrganizationUnitName&quot;:null,&quot;EventID&quot;:${EventID}}]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/AssignStaffsToEvent/EventId/${EventID}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">The request can contain only StaffID value</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="Get Random StaffID from array (BSF PreProcessor)" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var StaffIDs = vars.getObject(&quot;StaffIDs&quot;)					     //инициализируем массив
var StaffNames = vars.getObject(&quot;StaffNames&quot;)

var randomElement=Math.floor(Math.random() * StaffIDs.length); 		// инициализируем переменную для случайного ключа из массива
var randomElement=Math.floor(Math.random() * StaffNames.length);

vars.put(&quot;randomStaffID&quot;, StaffIDs[randomElement]);                   //объявляем переменную для запроса
vars.put(&quot;randomStaffName&quot;, StaffNames[randomElement]);
</stringProp>
          </BSFPreProcessor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);

vars.put(&quot;StaffID&quot;, serializedJSONBody.StaffID);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Assign Event Screenings To Staff" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[{&quot;ScreeningID&quot;:13,&quot;ScreeningName&quot;:&quot;Blood Pressure&quot;,&quot;Description&quot;:&quot;Blood Pressure&quot;,&quot;StaffID&quot;:${randomStaffID}},{&quot;ScreeningID&quot;:12,&quot;ScreeningName&quot;:&quot;Body Mass Index&quot;,&quot;Description&quot;:&quot;Body Mass Index&quot;,&quot;StaffID&quot;:${randomStaffID}},{&quot;ScreeningID&quot;:14,&quot;ScreeningName&quot;:&quot;Bone Mineral Density&quot;,&quot;Description&quot;:&quot;Bone Mineral Density&quot;,&quot;StaffID&quot;:${randomStaffID}},{&quot;ScreeningID&quot;:8,&quot;ScreeningName&quot;:&quot;Expected Results&quot;,&quot;Description&quot;:&quot;Expected Results&quot;,&quot;StaffID&quot;:${randomStaffID}},{&quot;ScreeningID&quot;:9,&quot;ScreeningName&quot;:&quot;Glucose&quot;,&quot;Description&quot;:&quot;Expected Results&quot;,&quot;StaffID&quot;:${randomStaffID}},{&quot;ScreeningID&quot;:10,&quot;ScreeningName&quot;:&quot;Hemoglobin&quot;,&quot;Description&quot;:&quot;Glucose Note List&quot;,&quot;StaffID&quot;:${randomStaffID}},{&quot;ScreeningID&quot;:11,&quot;ScreeningName&quot;:&quot;Nephropathy&quot;,&quot;Description&quot;:&quot;Nephropathy&quot;,&quot;StaffID&quot;:${randomStaffID}},{&quot;ScreeningID&quot;:15,&quot;ScreeningName&quot;:&quot;Spirometry&quot;,&quot;Description&quot;:&quot;Spirometry&quot;,&quot;StaffID&quot;:${randomStaffID}},{&quot;ScreeningID&quot;:7,&quot;ScreeningName&quot;:&quot;Cholesterol&quot;,&quot;Description&quot;:&quot;Cholesterol&quot;,&quot;StaffID&quot;:${randomStaffID}}]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${screeningpath}/AssignEventScreeningsToStaff/Event/${EventID}/Staff/${randomStaffID}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Lock Staff - Unlock Staff" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1423560068000</longProp>
        <longProp name="ThreadGroup.end_time">1423560068000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lock staff" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">3</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Incorrect Login" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${IncorrectLogin}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
vars.put(&quot;ErrorMessageCheck&quot;, json._ErrorMessages[0]);

var ErrorMessage = json._ErrorMessages[0];
if (ErrorMessage == &quot;Invalid Username or password.&quot;) {  //сравниваем переменные в памяти Javascript
       prev.setSuccessful(true);      			// Если значения не совпадают, то запрос не фейлится
	  prev.setResponseMessage(&quot;Invalid Username or password&quot;); // Иначе, видим сообщение, о том, что все OK)

}
else {
 	  prev.setResponseMessage(&quot;Your accout has been locked&quot;); // Иначе, видим сообщение, о том, что все OK)	
} </stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Unlock staff" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${Login}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">Getting authorization key for the next steps</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;sessionKey&quot;, serializedJSONBody.SessionKey);</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Unlock Staff" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/BiometricAuthenticationService/UnlockUser/120</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
vars.put(&quot;Response&quot;, json.serializedJSONBody);

var Response = vars.get(&quot;Response&quot;)
if (Response == &quot;User was successfully unlocked.&quot;) {  //сравниваем переменные в памяти Javascript
       prev.setSuccessful(true);      			// Если значения не совпадают, то запрос не фейлится
	  prev.setResponseMessage(&quot;User was successfully unlocked&quot;); // Иначе, видим сообщение, о том, что все OK)

}
else {
 	  prev.setResponseMessage(&quot;Something goes wrong&quot;); // Иначе, видим сообщение, о том, что все OK)	
} </stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Unlock user Debug" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Login, Event creation, List of screenings. Assign screenings, assign staff, assign screenings to staff" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1413963008000</longProp>
        <longProp name="ThreadGroup.end_time">1413963008000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${Login}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Getting authorization key for the next steps</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;sessionKey&quot;, serializedJSONBody.SessionKey);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-967352097">fenotal</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create new Event" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;OpenTime&quot;:&quot;2014-10-21T09:00:00.00&quot;,&quot;CloseTime&quot;:&quot;2014-10-21T21:00:00.00&quot;,&quot;IsOpen&quot;:1,&quot;OrderingPhysicianID&quot;:97,&quot;ReferringPhysicianID&quot;:94,&quot;OrganizationUnitID&quot;:4,&quot;EventDate&quot;:&quot;2014-10-21T12:00:00.00&quot;,&quot;LocationID&quot;:47,&quot;EventTypeID&quot;:4,&quot;IntervalTimeID&quot;:5,&quot;EventName&quot;:&quot;JM2 testing commercial&quot;,&quot;EventDescription&quot;:&quot;Jm&quot;,&quot;MaxRegistrationsForInterval&quot;:2}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/Event/Add?</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;EventID&quot;, serializedJSONBody.EventID);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1681860661">JM2 testing commercial</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create new event (Fitness)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${NewEventFit}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/Event/Add?</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">It&apos;s possible to create events assigned to different organizations. Use next defined  variables: ${NewEventFit} (Fitness event), ${NewEventMed} (Medicare event), ${NewEvent} (Commercial event) </stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;EventID&quot;, serializedJSONBody.EventID);
vars.put(&quot;EventName&quot;, serializedJSONBody.EventName);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1681860661">JM2 testing commercial</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Available Screenings List for Event " enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/BiometricScreeningService/AvailableScreeningList/Event/${EventID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Show ScreeningNames" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());	//получаем данные из респонса в виде строки
var ScreeningNames = JSON.parse(json.serializedJSONBody); 	// парсим респонс serializedJSONBody, результат ScreeningNames будет в виде массива 

vars.putObject(&quot;ScreeningNames&quot;, ScreeningNames);		    //создаем объект в Jmeter, содержащий значения переменной ScreeningNames

var Names = []; 								       //создаем массив
for(var i in ScreeningNames) {						 // i - ключ массива, перебираем все значения по порядку
		Names.push(ScreeningNames[i].ScreeningName);		//Помещаем переменную в массив
}

vars.put(&quot;Debug_ScreeningNames&quot;, JSON.stringify(Names));   //Вывод списка скринингов в DebugSampler</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Считываем названия скринингов из респонса, выводим в</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Checking all available screenings are present" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1112568588">&quot;Health Questionnaire&quot;,&quot;Resting Heart Rate&quot;,&quot;Body Fat&quot;,&quot;Blood Pressure&quot;,&quot;Body Mass Index&quot;,&quot;Waist Measurement&quot;,&quot;Muscular Strength&quot;,&quot;Cardiovascular Fitness&quot;,&quot;Flexibility&quot;</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">Проверяем, что содержаться все доступные названия обследований</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Assign screenings to Fitness  Event" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[{&quot;ScreeningID&quot;:16,&quot;Description&quot;:&quot;Health Questionnaire&quot;,&quot;ScreeningName&quot;:&quot;Health Questionnaire&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:0},{&quot;ScreeningID&quot;:17,&quot;Description&quot;:&quot;Resting Heart Rate&quot;,&quot;ScreeningName&quot;:&quot;Resting Heart Rate&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:1},{&quot;ScreeningID&quot;:18,&quot;Description&quot;:&quot;Body Fat&quot;,&quot;ScreeningName&quot;:&quot;Body Fat&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:2},{&quot;ScreeningID&quot;:19,&quot;Description&quot;:&quot;Blood Pressure&quot;,&quot;ScreeningName&quot;:&quot;Blood Pressure&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:3},{&quot;ScreeningID&quot;:20,&quot;Description&quot;:&quot;Body Mass Index&quot;,&quot;ScreeningName&quot;:&quot;Body Mass Index&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:4},{&quot;ScreeningID&quot;:21,&quot;Description&quot;:&quot;Waist Measurement&quot;,&quot;ScreeningName&quot;:&quot;Waist Measurement&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:5},{&quot;ScreeningID&quot;:22,&quot;Description&quot;:&quot;Muscular Strength&quot;,&quot;ScreeningName&quot;:&quot;Muscular Strength&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:6},{&quot;ScreeningID&quot;:23,&quot;Description&quot;:&quot;Cardiovascular Fitness&quot;,&quot;ScreeningName&quot;:&quot;Cardiovascular Fitness&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:7},{&quot;ScreeningID&quot;:24,&quot;Description&quot;:&quot;Flexibility Fitness&quot;,&quot;ScreeningName&quot;:&quot;Flexibility&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:8}]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/AssignScreeningsToEvent/EventId/${EventID}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="544818101">Access is denied</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1373468489">EventScreeningID</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Assign screenings to Medicare Event" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[{&quot;ScreeningID&quot;:1,&quot;Description&quot;:&quot;Blood Work&quot;,&quot;ScreeningName&quot;:&quot;Blood Work&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:0},{&quot;ScreeningID&quot;:2,&quot;Description&quot;:&quot;Body Mass Index&quot;,&quot;ScreeningName&quot;:&quot;Body Mass Index&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:1},{&quot;ScreeningID&quot;:3,&quot;Description&quot;:&quot;Blood Pressure&quot;,&quot;ScreeningName&quot;:&quot;Blood Pressure&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:2},{&quot;ScreeningID&quot;:4,&quot;Description&quot;:&quot;Bone Mineral Density&quot;,&quot;ScreeningName&quot;:&quot;Bone Mineral Density&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:3},{&quot;ScreeningID&quot;:5,&quot;Description&quot;:&quot;Spirometry&quot;,&quot;ScreeningName&quot;:&quot;Spirometry&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:4},{&quot;ScreeningID&quot;:6,&quot;Description&quot;:&quot;Retinal Eye Exam&quot;,&quot;ScreeningName&quot;:&quot;Retinal Eye Exam&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:5}]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/AssignScreeningsToEvent/EventId/${EventID}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="544818101">Access is denied</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1373468489">EventScreeningID</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Assign screenings to Commercial Event" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[{&quot;ScreeningID&quot;:7,&quot;Description&quot;:&quot;Cholesterol&quot;,&quot;ScreeningName&quot;:&quot;Cholesterol&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:0},{&quot;ScreeningID&quot;:8,&quot;Description&quot;:&quot;Expected Results&quot;,&quot;ScreeningName&quot;:&quot;Expected Results&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:1},{&quot;ScreeningID&quot;:9,&quot;Description&quot;:&quot;Expected Results&quot;,&quot;ScreeningName&quot;:&quot;Glucose&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:2},{&quot;ScreeningID&quot;:10,&quot;Description&quot;:&quot;Glucose Note List&quot;,&quot;ScreeningName&quot;:&quot;Hemoglobin&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:3},{&quot;ScreeningID&quot;:11,&quot;Description&quot;:&quot;Nephropathy&quot;,&quot;ScreeningName&quot;:&quot;Nephropathy&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:4},{&quot;ScreeningID&quot;:12,&quot;Description&quot;:&quot;Body Mass Index&quot;,&quot;ScreeningName&quot;:&quot;Body Mass Index&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:5},{&quot;ScreeningID&quot;:13,&quot;Description&quot;:&quot;Blood Pressure&quot;,&quot;ScreeningName&quot;:&quot;Blood Pressure&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:6},{&quot;ScreeningID&quot;:14,&quot;Description&quot;:&quot;Bone Mineral Density&quot;,&quot;ScreeningName&quot;:&quot;Bone Mineral Density&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:7},{&quot;ScreeningID&quot;:15,&quot;Description&quot;:&quot;Spirometry&quot;,&quot;ScreeningName&quot;:&quot;Spirometry&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:8}]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/AssignScreeningsToEvent/EventId/${EventID}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="544818101">Access is denied</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1373468489">EventScreeningID</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Existing Staff List for Event " enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/ExistingStaffList/Event/${EventID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Available Staff List for Event" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/AvailableStaffList/Event/${EventID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Получаем весь список персонала для ивента</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Creating variable for adding all the Staff to Event at once" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());   // получаем данные в виде строки
var objects = JSON.parse(json.serializedJSONBody);      // парсинг Json-респонса
var eventId = vars.get(&quot;EventID&quot;);                      //объявляем переменную eventId для дальнейшего добавления в тело запроса

var ids = []; 								  		//создаем массив
for(var i in objects) {						  		// i - ключ массива, перебираем все значения по порядку
	ids.push(objects[i].StaffID);		  				//Помещаем переменную StaffID в массив объектов (для каждого объекта) 
}



for(var i in objects) {						  		// i - ключ массива, перебираем все значения по порядку
	objects[i].EventID = eventId * 1;		  			//Помещаем значение переменной EventID в массив, умножение на 1 превращает строку в число
}
vars.put(&quot;AssignStaffsRequest&quot;, JSON.stringify(objects)); //объявляем переменную AssignStaffsRequest для следующего запроса. Получаем ее в виде строки.</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Создаем переменную, содержащую всю информацию о персонале, используем ее для добавления всех доступных сотрудников к определенному ивенту</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Show all Staff IDs" enabled="true">
            <stringProp name="TestPlan.comments">Создаем массив содержащий все айдишники персонала</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);

var ids = []; 								  	//создаем массив
for(var i in objects) {						  	// i - ключ массива, перебираем все значения по порядку
	ids.push(objects[i].StaffID);				//Помещаем переменную в массив, то есть создаем массив со значениями всех StaffID	
}

vars.put(&quot;DEBUG_StaffIDs&quot;, JSON.stringify(ids));         // вывод в дебаггер
vars.putObject(&quot;StaffIDs&quot;, ids);					// инициализация объекта EventIDs, для следующего запроса

</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Show Staff Full names" enabled="true">
            <stringProp name="TestPlan.comments">Создаем массив содержащий все имена персонала</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);

var StaffNames = []; 								  	//создаем массив
for(var i in objects) {						  	// i - ключ массива, перебираем все значения по порядку
	StaffNames.push(objects[i].FullName);				//Помещаем переменную в массив, то есть создаем массив со значениями всех FullName
}

vars.put(&quot;DEBUG_FullNames&quot;, JSON.stringify(StaffNames));       // вывод в дебаггер
vars.putObject(&quot;StaffNames&quot;, StaffNames);					// инициализация объекта EventIDs, для следующего запроса

</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-232903717">StaffID</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Assign Staffs To Event (Add All existing staffs to event) ${EventID} , ${EventName}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${AssignStaffsRequest}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/AssignStaffsToEvent/EventId/${EventID}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">The request contains only StaffID</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Assign Random StaffsID :${randomStaffID}, ${randomStaffName} To Event: ${EventID} , ${EventName}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[{&quot;StaffID&quot;:${randomStaffID},&quot;FirstName&quot;:&quot;&quot;,&quot;LastName&quot;:&quot;&quot;,&quot;MiddleName&quot;:&quot;&quot;,&quot;FullName&quot;:&quot;&quot;,&quot;OrganizationUnitID&quot;:0,&quot;OrganizationUnitName&quot;:null,&quot;EventID&quot;:${EventID}}]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/AssignStaffsToEvent/EventId/${EventID}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">The request can contain only StaffID value</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="Get Random StaffID from array (BSF PreProcessor)" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var StaffIDs = vars.getObject(&quot;StaffIDs&quot;)					     //инициализируем массив
var StaffNames = vars.getObject(&quot;StaffNames&quot;)

var randomElement=Math.floor(Math.random() * StaffIDs.length); 		// инициализируем переменную для случайного ключа из массива
var randomElement=Math.floor(Math.random() * StaffNames.length);

vars.put(&quot;randomStaffID&quot;, StaffIDs[randomElement]);                   //объявляем переменную для запроса
vars.put(&quot;randomStaffName&quot;, StaffNames[randomElement]);
</stringProp>
          </BSFPreProcessor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);

vars.put(&quot;StaffID&quot;, serializedJSONBody.StaffID);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Assign Event Screenings To Staff" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[{&quot;ScreeningID&quot;:13,&quot;ScreeningName&quot;:&quot;Blood Pressure&quot;,&quot;Description&quot;:&quot;Blood Pressure&quot;,&quot;StaffID&quot;:${randomStaffID}},{&quot;ScreeningID&quot;:12,&quot;ScreeningName&quot;:&quot;Body Mass Index&quot;,&quot;Description&quot;:&quot;Body Mass Index&quot;,&quot;StaffID&quot;:${randomStaffID}},{&quot;ScreeningID&quot;:14,&quot;ScreeningName&quot;:&quot;Bone Mineral Density&quot;,&quot;Description&quot;:&quot;Bone Mineral Density&quot;,&quot;StaffID&quot;:${randomStaffID}},{&quot;ScreeningID&quot;:8,&quot;ScreeningName&quot;:&quot;Expected Results&quot;,&quot;Description&quot;:&quot;Expected Results&quot;,&quot;StaffID&quot;:${randomStaffID}},{&quot;ScreeningID&quot;:9,&quot;ScreeningName&quot;:&quot;Glucose&quot;,&quot;Description&quot;:&quot;Expected Results&quot;,&quot;StaffID&quot;:${randomStaffID}},{&quot;ScreeningID&quot;:10,&quot;ScreeningName&quot;:&quot;Hemoglobin&quot;,&quot;Description&quot;:&quot;Glucose Note List&quot;,&quot;StaffID&quot;:${randomStaffID}},{&quot;ScreeningID&quot;:11,&quot;ScreeningName&quot;:&quot;Nephropathy&quot;,&quot;Description&quot;:&quot;Nephropathy&quot;,&quot;StaffID&quot;:${randomStaffID}},{&quot;ScreeningID&quot;:15,&quot;ScreeningName&quot;:&quot;Spirometry&quot;,&quot;Description&quot;:&quot;Spirometry&quot;,&quot;StaffID&quot;:${randomStaffID}},{&quot;ScreeningID&quot;:7,&quot;ScreeningName&quot;:&quot;Cholesterol&quot;,&quot;Description&quot;:&quot;Cholesterol&quot;,&quot;StaffID&quot;:${randomStaffID}}]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${screeningpath}/AssignEventScreeningsToStaff/Event/${EventID}/Staff/${randomStaffID}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Commercial event creation Full case" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1423069604000</longProp>
        <longProp name="ThreadGroup.end_time">1423069604000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${LoginStaff}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Getting authorization key for the next steps. HTTP Header Manager contains authorization key = static authorization token + sessionKey.  We use authorization key in all the requests</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;sessionKey&quot;, serializedJSONBody.SessionKey);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Getting sessionkey to use it in the next response</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Checking Username is present" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-2034820227">Joenelson</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create new event (Commercial)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${NewEvent}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/Event/Add?</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">It&apos;s possible to create events assigned to different organizations. Use next defined  variables: ${NewEventFit} (Fitness event), ${NewEventMed} (Medicare event), ${NewEvent} (Commercial event) </stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;EventID&quot;, serializedJSONBody.EventID);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings"/>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Available Screenings List for Event " enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/BiometricScreeningService/AvailableScreeningList/Event/${EventID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Show ScreeningNames" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());		//получаем данные из респонса в виде строки
var ScreeningNames = JSON.parse(json.serializedJSONBody); 	// парсим респонс serializedJSONBody, результат ScreeningNames будет в виде массива 

vars.putObject(&quot;ScreeningNames&quot;, ScreeningNames);		    	//создаем объект в Jmeter, содержащий значения переменной ScreeningNames

var Names = []; 								       //создаем массив
for(var i in ScreeningNames) {						 // i - ключ массива, перебираем все значения по порядку
		Names.push(ScreeningNames[i].ScreeningName);		//Помещаем переменную в массив
}

vars.put(&quot;DEBUG_ScreeningNames&quot;, JSON.stringify(Names));   	//Вывод списка скринингов в DebugSampler</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Считываем названия скринингов из респонса, выводим в</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler. Show screenings list" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Checking all available screenings are present" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1787225115">&quot;Cholesterol&quot;,&quot;Expected Results&quot;,&quot;Glucose&quot;,&quot;Hemoglobin&quot;,&quot;Nephropathy&quot;,&quot;Body Mass Index&quot;,&quot;Blood Pressure&quot;,&quot;Bone Mineral Density&quot;,&quot;Spirometry&quot;</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">Проверяем, что содержаться все доступные названия обследований</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Assign screenings to Commercial Event" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[{&quot;ScreeningID&quot;:7,&quot;Description&quot;:&quot;Cholesterol&quot;,&quot;ScreeningName&quot;:&quot;Cholesterol&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:0},{&quot;ScreeningID&quot;:8,&quot;Description&quot;:&quot;Expected Results&quot;,&quot;ScreeningName&quot;:&quot;Expected Results&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:1},{&quot;ScreeningID&quot;:9,&quot;Description&quot;:&quot;Expected Results&quot;,&quot;ScreeningName&quot;:&quot;Glucose&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:2},{&quot;ScreeningID&quot;:10,&quot;Description&quot;:&quot;Glucose Note List&quot;,&quot;ScreeningName&quot;:&quot;Hemoglobin&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:3},{&quot;ScreeningID&quot;:11,&quot;Description&quot;:&quot;Nephropathy&quot;,&quot;ScreeningName&quot;:&quot;Nephropathy&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:4},{&quot;ScreeningID&quot;:12,&quot;Description&quot;:&quot;Body Mass Index&quot;,&quot;ScreeningName&quot;:&quot;Body Mass Index&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:5},{&quot;ScreeningID&quot;:13,&quot;Description&quot;:&quot;Blood Pressure&quot;,&quot;ScreeningName&quot;:&quot;Blood Pressure&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:6},{&quot;ScreeningID&quot;:14,&quot;Description&quot;:&quot;Bone Mineral Density&quot;,&quot;ScreeningName&quot;:&quot;Bone Mineral Density&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:7},{&quot;ScreeningID&quot;:15,&quot;Description&quot;:&quot;Spirometry&quot;,&quot;ScreeningName&quot;:&quot;Spirometry&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:8}]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/AssignScreeningsToEvent/EventId/${EventID}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="544818101">Access is denied</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1373468489">EventScreeningID</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Existing Staff List for Event " enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/ExistingStaffList/Event/${EventID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Available Staff List for Event" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/AvailableStaffList/Event/${EventID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Получаем весь список персонала для ивента</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Creating variable for adding all the Staff to Event at once" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());   // получаем данные в виде строки
var objects = JSON.parse(json.serializedJSONBody);      // парсинг Json-респонса
var eventId = vars.get(&quot;EventID&quot;);                      //объявляем переменную eventId для дальнейшего добавления в тело запроса

var ids = []; 								  		//создаем массив
for(var i in objects) {						  		// i - ключ массива, перебираем все значения по порядку
	ids.push(objects[i].StaffID);		  				//Помещаем переменную StaffID в массив объектов (для каждого объекта) 
}



for(var i in objects) {						  		// i - ключ массива, перебираем все значения по порядку
	objects[i].EventID = eventId * 1;		  			//Помещаем значение переменной EventID в массив, умножение на 1 превращает строку в число
}
vars.put(&quot;AssignStaffsRequest&quot;, JSON.stringify(objects)); //объявляем переменную AssignStaffsRequest для следующего запроса. Получаем ее в виде строки.</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Создаем переменную, содержащую всю информацию о персонале, используем ее для добавления всех доступных сотрудников к определенному ивенту</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Show all Staff IDs" enabled="true">
            <stringProp name="TestPlan.comments">Создаем массив содержащий все айдишники персонала</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);

var ids = []; 								  	//создаем массив
for(var i in objects) {						  	// i - ключ массива, перебираем все значения по порядку
	ids.push(objects[i].StaffID);				//Помещаем переменную в массив, то есть создаем массив со значениями всех StaffID	
}

vars.put(&quot;DEBUG_StaffIDs&quot;, JSON.stringify(ids));         // вывод в дебаггер
vars.putObject(&quot;StaffIDs&quot;, ids);					// инициализация объекта EventIDs, для следующего запроса

</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Show Staff Full names" enabled="true">
            <stringProp name="TestPlan.comments">Создаем массив содержащий все имена персонала</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);

var ids = []; 								  	//создаем массив
for(var i in objects) {						  	// i - ключ массива, перебираем все значения по порядку
	ids.push(objects[i].FullName);				//Помещаем переменную в массив, то есть создаем массив со значениями всех FullName
}

vars.put(&quot;DEBUG_FullNames&quot;, JSON.stringify(ids));       // вывод в дебаггер
vars.putObject(&quot;StaffIDs&quot;, ids);					// инициализация объекта EventIDs, для следующего запроса

</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-232903717">StaffID</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Assign Staffs To Event (Add All existing staffs to event)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${AssignStaffsRequest}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/AssignStaffsToEvent/EventId/${EventID}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">The request contains only StaffID</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Assign Random Staffs To Event" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[{&quot;StaffID&quot;:${randomStaffID},&quot;FirstName&quot;:&quot;&quot;,&quot;LastName&quot;:&quot;&quot;,&quot;MiddleName&quot;:&quot;&quot;,&quot;FullName&quot;:&quot;&quot;,&quot;OrganizationUnitID&quot;:0,&quot;OrganizationUnitName&quot;:null,&quot;EventID&quot;:${EventID}}]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/AssignStaffsToEvent/EventId/${EventID}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">The request can contain only StaffID value</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="Get Random StaffID from array (BSF PreProcessor)" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var StaffIDs = vars.getObject(&quot;StaffIDs&quot;)					     //инициализируем массив
var randomElement=Math.floor(Math.random() * StaffIDs.length); 		// инициализируем переменную для случайного ключа из массива

vars.put(&quot;randomStaffID&quot;, StaffIDs[randomElement]);                   //объявляем переменную для запроса
vars.put(&quot;DEBUG_randomStaffID&quot;, StaffIDs[randomElement]);			//выводим ее значение в дебаггер</stringProp>
          </BSFPreProcessor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);

vars.put(&quot;StaffID&quot;, serializedJSONBody.StaffID);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Assign Event Screenings To Staff" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[{&quot;ScreeningID&quot;:13,&quot;ScreeningName&quot;:&quot;Blood Pressure&quot;,&quot;Description&quot;:&quot;Blood Pressure&quot;,&quot;StaffID&quot;:${randomStaffID}},{&quot;ScreeningID&quot;:12,&quot;ScreeningName&quot;:&quot;Body Mass Index&quot;,&quot;Description&quot;:&quot;Body Mass Index&quot;,&quot;StaffID&quot;:${randomStaffID}},{&quot;ScreeningID&quot;:14,&quot;ScreeningName&quot;:&quot;Bone Mineral Density&quot;,&quot;Description&quot;:&quot;Bone Mineral Density&quot;,&quot;StaffID&quot;:${randomStaffID}},{&quot;ScreeningID&quot;:8,&quot;ScreeningName&quot;:&quot;Expected Results&quot;,&quot;Description&quot;:&quot;Expected Results&quot;,&quot;StaffID&quot;:${randomStaffID}},{&quot;ScreeningID&quot;:9,&quot;ScreeningName&quot;:&quot;Glucose&quot;,&quot;Description&quot;:&quot;Expected Results&quot;,&quot;StaffID&quot;:${randomStaffID}},{&quot;ScreeningID&quot;:10,&quot;ScreeningName&quot;:&quot;Hemoglobin&quot;,&quot;Description&quot;:&quot;Glucose Note List&quot;,&quot;StaffID&quot;:${randomStaffID}},{&quot;ScreeningID&quot;:11,&quot;ScreeningName&quot;:&quot;Nephropathy&quot;,&quot;Description&quot;:&quot;Nephropathy&quot;,&quot;StaffID&quot;:${randomStaffID}},{&quot;ScreeningID&quot;:15,&quot;ScreeningName&quot;:&quot;Spirometry&quot;,&quot;Description&quot;:&quot;Spirometry&quot;,&quot;StaffID&quot;:${randomStaffID}},{&quot;ScreeningID&quot;:7,&quot;ScreeningName&quot;:&quot;Cholesterol&quot;,&quot;Description&quot;:&quot;Cholesterol&quot;,&quot;StaffID&quot;:${randomStaffID}}]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${screeningpath}/AssignEventScreeningsToStaff/Event/${EventID}/Staff/${randomStaffID}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Medicare event creation Full case" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1423071157000</longProp>
        <longProp name="ThreadGroup.end_time">1423071157000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${LoginStaff}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Getting authorization key for the next steps. HTTP Header Manager contains authorization key = static authorization token + sessionKey.  We use authorization key in all the requests</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;sessionKey&quot;, serializedJSONBody.SessionKey);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Getting sessionkey to use it in the next response</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Checking Username is present" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-2034820227">Joenelson</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create new event (Medicare)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${NewEventMed}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/Event/Add?</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">It&apos;s possible to create events assigned to different organizations. Use next defined  variables: ${NewEventFit} (Fitness event), ${NewEventMed} (Medicare event), ${NewEvent} (Commercial event) </stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;EventID&quot;, serializedJSONBody.EventID);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1681860661">JM2 testing commercial</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Available Screenings List for Event " enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/BiometricScreeningService/AvailableScreeningList/Event/${EventID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Show ScreeningNames" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());		//получаем данные из респонса в виде строки
var ScreeningNames = JSON.parse(json.serializedJSONBody); 	// парсим респонс serializedJSONBody, результат ScreeningNames будет в виде массива 

vars.putObject(&quot;ScreeningNames&quot;, ScreeningNames);		    	//создаем объект в Jmeter, содержащий значения переменной ScreeningNames

var Names = []; 								       //создаем массив
for(var i in ScreeningNames) {						 // i - ключ массива, перебираем все значения по порядку
		Names.push(ScreeningNames[i].ScreeningName);		//Помещаем переменную в массив
}

vars.put(&quot;DEBUG_ScreeningNames&quot;, JSON.stringify(Names));   	//Вывод списка скринингов в DebugSampler</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Считываем названия скринингов из респонса, выводим в</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler. Show screenings list" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Checking all available screenings are present" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1297943279">&quot;Blood Work&quot;,&quot;Body Mass Index&quot;,&quot;Blood Pressure&quot;,&quot;Bone Mineral Density&quot;,&quot;Spirometry&quot;,&quot;Retinal Eye Exam&quot;</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">Проверяем, что содержаться все доступные названия обследований</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Assign screenings to Commercial Event" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[{&quot;ScreeningID&quot;:7,&quot;Description&quot;:&quot;Cholesterol&quot;,&quot;ScreeningName&quot;:&quot;Cholesterol&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:0},{&quot;ScreeningID&quot;:8,&quot;Description&quot;:&quot;Expected Results&quot;,&quot;ScreeningName&quot;:&quot;Expected Results&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:1},{&quot;ScreeningID&quot;:9,&quot;Description&quot;:&quot;Expected Results&quot;,&quot;ScreeningName&quot;:&quot;Glucose&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:2},{&quot;ScreeningID&quot;:10,&quot;Description&quot;:&quot;Glucose Note List&quot;,&quot;ScreeningName&quot;:&quot;Hemoglobin&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:3},{&quot;ScreeningID&quot;:11,&quot;Description&quot;:&quot;Nephropathy&quot;,&quot;ScreeningName&quot;:&quot;Nephropathy&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:4},{&quot;ScreeningID&quot;:12,&quot;Description&quot;:&quot;Body Mass Index&quot;,&quot;ScreeningName&quot;:&quot;Body Mass Index&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:5},{&quot;ScreeningID&quot;:13,&quot;Description&quot;:&quot;Blood Pressure&quot;,&quot;ScreeningName&quot;:&quot;Blood Pressure&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:6},{&quot;ScreeningID&quot;:14,&quot;Description&quot;:&quot;Bone Mineral Density&quot;,&quot;ScreeningName&quot;:&quot;Bone Mineral Density&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:7},{&quot;ScreeningID&quot;:15,&quot;Description&quot;:&quot;Spirometry&quot;,&quot;ScreeningName&quot;:&quot;Spirometry&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:8}]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/AssignScreeningsToEvent/EventId/${EventID}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="544818101">Access is denied</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1373468489">EventScreeningID</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Existing Staff List for Event " enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/ExistingStaffList/Event/${EventID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Available Staff List for Event" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/AvailableStaffList/Event/${EventID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Получаем весь список персонала для ивента</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Creating variable for adding all the Staff to Event at once" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());   // получаем данные в виде строки
var objects = JSON.parse(json.serializedJSONBody);      // парсинг Json-респонса
var eventId = vars.get(&quot;EventID&quot;);                      //объявляем переменную eventId для дальнейшего добавления в тело запроса

var ids = []; 								  		//создаем массив
for(var i in objects) {						  		// i - ключ массива, перебираем все значения по порядку
	ids.push(objects[i].StaffID);		  				//Помещаем переменную StaffID в массив объектов (для каждого объекта) 
}



for(var i in objects) {						  		// i - ключ массива, перебираем все значения по порядку
	objects[i].EventID = eventId * 1;		  			//Помещаем значение переменной EventID в массив, умножение на 1 превращает строку в число
}
vars.put(&quot;AssignStaffsRequest&quot;, JSON.stringify(objects)); //объявляем переменную AssignStaffsRequest для следующего запроса. Получаем ее в виде строки.</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Создаем переменную, содержащую всю информацию о персонале, используем ее для добавления всех доступных сотрудников к определенному ивенту</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Show all Staff IDs" enabled="true">
            <stringProp name="TestPlan.comments">Создаем массив содержащий все айдишники персонала</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);

var ids = []; 								  	//создаем массив
for(var i in objects) {						  	// i - ключ массива, перебираем все значения по порядку
	ids.push(objects[i].StaffID);				//Помещаем переменную в массив, то есть создаем массив со значениями всех StaffID	
}

vars.put(&quot;DEBUG_StaffIDs&quot;, JSON.stringify(ids));         // вывод в дебаггер
vars.putObject(&quot;StaffIDs&quot;, ids);					// инициализация объекта EventIDs, для следующего запроса

</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Show Staff Full names" enabled="true">
            <stringProp name="TestPlan.comments">Создаем массив содержащий все имена персонала</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);

var ids = []; 								  	//создаем массив
for(var i in objects) {						  	// i - ключ массива, перебираем все значения по порядку
	ids.push(objects[i].FullName);				//Помещаем переменную в массив, то есть создаем массив со значениями всех FullName
}

vars.put(&quot;DEBUG_FullNames&quot;, JSON.stringify(ids));       // вывод в дебаггер
vars.putObject(&quot;StaffIDs&quot;, ids);					// инициализация объекта EventIDs, для следующего запроса

</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-232903717">StaffID</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Assign Staffs To Event (Add All existing staffs to event)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${AssignStaffsRequest}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/AssignStaffsToEvent/EventId/${EventID}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">The request contains only StaffID</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Assign Random Staffs To Event" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[{&quot;StaffID&quot;:${randomStaffID},&quot;FirstName&quot;:&quot;&quot;,&quot;LastName&quot;:&quot;&quot;,&quot;MiddleName&quot;:&quot;&quot;,&quot;FullName&quot;:&quot;&quot;,&quot;OrganizationUnitID&quot;:0,&quot;OrganizationUnitName&quot;:null,&quot;EventID&quot;:${EventID}}]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/AssignStaffsToEvent/EventId/${EventID}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">The request can contain only StaffID value</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="Get Random StaffID from array (BSF PreProcessor)" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var StaffIDs = vars.getObject(&quot;StaffIDs&quot;)					     //инициализируем массив
var randomElement=Math.floor(Math.random() * StaffIDs.length); 		// инициализируем переменную для случайного ключа из массива

vars.put(&quot;randomStaffID&quot;, StaffIDs[randomElement]);                   //объявляем переменную для запроса
vars.put(&quot;DEBUG_randomStaffID&quot;, StaffIDs[randomElement]);			//выводим ее значение в дебаггер</stringProp>
          </BSFPreProcessor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);

vars.put(&quot;StaffID&quot;, serializedJSONBody.StaffID);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Assign Event Screenings To Staff" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[{&quot;ScreeningID&quot;:13,&quot;ScreeningName&quot;:&quot;Blood Pressure&quot;,&quot;Description&quot;:&quot;Blood Pressure&quot;,&quot;StaffID&quot;:${randomStaffID}},{&quot;ScreeningID&quot;:12,&quot;ScreeningName&quot;:&quot;Body Mass Index&quot;,&quot;Description&quot;:&quot;Body Mass Index&quot;,&quot;StaffID&quot;:${randomStaffID}},{&quot;ScreeningID&quot;:14,&quot;ScreeningName&quot;:&quot;Bone Mineral Density&quot;,&quot;Description&quot;:&quot;Bone Mineral Density&quot;,&quot;StaffID&quot;:${randomStaffID}},{&quot;ScreeningID&quot;:8,&quot;ScreeningName&quot;:&quot;Expected Results&quot;,&quot;Description&quot;:&quot;Expected Results&quot;,&quot;StaffID&quot;:${randomStaffID}},{&quot;ScreeningID&quot;:9,&quot;ScreeningName&quot;:&quot;Glucose&quot;,&quot;Description&quot;:&quot;Expected Results&quot;,&quot;StaffID&quot;:${randomStaffID}},{&quot;ScreeningID&quot;:10,&quot;ScreeningName&quot;:&quot;Hemoglobin&quot;,&quot;Description&quot;:&quot;Glucose Note List&quot;,&quot;StaffID&quot;:${randomStaffID}},{&quot;ScreeningID&quot;:11,&quot;ScreeningName&quot;:&quot;Nephropathy&quot;,&quot;Description&quot;:&quot;Nephropathy&quot;,&quot;StaffID&quot;:${randomStaffID}},{&quot;ScreeningID&quot;:15,&quot;ScreeningName&quot;:&quot;Spirometry&quot;,&quot;Description&quot;:&quot;Spirometry&quot;,&quot;StaffID&quot;:${randomStaffID}},{&quot;ScreeningID&quot;:7,&quot;ScreeningName&quot;:&quot;Cholesterol&quot;,&quot;Description&quot;:&quot;Cholesterol&quot;,&quot;StaffID&quot;:${randomStaffID}}]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${screeningpath}/AssignEventScreeningsToStaff/Event/${EventID}/Staff/${randomStaffID}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Fitness event creation Full case" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1423071157000</longProp>
        <longProp name="ThreadGroup.end_time">1423071157000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${Login}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Getting authorization key for the next steps. HTTP Header Manager contains authorization key = static authorization token + sessionKey.  We use authorization key in all the requests</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;sessionKey&quot;, serializedJSONBody.SessionKey);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Getting sessionkey to use it in the next response</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Checking Username is present" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2086632421">Eugene</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create new event (Fitness)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${NewEventFit}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/Event/Add?</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">It&apos;s possible to create events assigned to different organizations. Use next defined  variables: ${NewEventFit} (Fitness event), ${NewEventMed} (Medicare event), ${NewEvent} (Commercial event) </stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;EventID&quot;, serializedJSONBody.EventID);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="293613580">FITNESS PROGRAM</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Available Screenings List for Event " enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/BiometricScreeningService/AvailableScreeningList/Event/${EventID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Show ScreeningNames" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());		//получаем данные из респонса в виде строки
var ScreeningNames = JSON.parse(json.serializedJSONBody); 	// парсим респонс serializedJSONBody, результат ScreeningNames будет в виде массива 

vars.putObject(&quot;ScreeningNames&quot;, ScreeningNames);		    	//создаем объект в Jmeter, содержащий значения переменной ScreeningNames

var Names = []; 								       //создаем массив
for(var i in ScreeningNames) {						 // i - ключ массива, перебираем все значения по порядку
		Names.push(ScreeningNames[i].ScreeningName);		//Помещаем переменную в массив
}

vars.put(&quot;DEBUG_ScreeningNames&quot;, JSON.stringify(Names));   	//Вывод списка скринингов в DebugSampler</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Считываем названия скринингов из респонса, выводим в</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler. Show screenings list" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Checking all available screenings are present" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1112568588">&quot;Health Questionnaire&quot;,&quot;Resting Heart Rate&quot;,&quot;Body Fat&quot;,&quot;Blood Pressure&quot;,&quot;Body Mass Index&quot;,&quot;Waist Measurement&quot;,&quot;Muscular Strength&quot;,&quot;Cardiovascular Fitness&quot;,&quot;Flexibility&quot;</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">Проверяем, что содержаться все доступные названия обследований</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Assign screenings to Fitness  Event" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[{&quot;ScreeningID&quot;:16,&quot;Description&quot;:&quot;Health Questionnaire&quot;,&quot;ScreeningName&quot;:&quot;Health Questionnaire&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:0},{&quot;ScreeningID&quot;:17,&quot;Description&quot;:&quot;Resting Heart Rate&quot;,&quot;ScreeningName&quot;:&quot;Resting Heart Rate&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:1},{&quot;ScreeningID&quot;:18,&quot;Description&quot;:&quot;Body Fat&quot;,&quot;ScreeningName&quot;:&quot;Body Fat&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:2},{&quot;ScreeningID&quot;:19,&quot;Description&quot;:&quot;Blood Pressure&quot;,&quot;ScreeningName&quot;:&quot;Blood Pressure&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:3},{&quot;ScreeningID&quot;:20,&quot;Description&quot;:&quot;Body Mass Index&quot;,&quot;ScreeningName&quot;:&quot;Body Mass Index&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:4},{&quot;ScreeningID&quot;:21,&quot;Description&quot;:&quot;Waist Measurement&quot;,&quot;ScreeningName&quot;:&quot;Waist Measurement&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:5},{&quot;ScreeningID&quot;:22,&quot;Description&quot;:&quot;Muscular Strength&quot;,&quot;ScreeningName&quot;:&quot;Muscular Strength&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:6},{&quot;ScreeningID&quot;:23,&quot;Description&quot;:&quot;Cardiovascular Fitness&quot;,&quot;ScreeningName&quot;:&quot;Cardiovascular Fitness&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:7},{&quot;ScreeningID&quot;:24,&quot;Description&quot;:&quot;Flexibility Fitness&quot;,&quot;ScreeningName&quot;:&quot;Flexibility&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:8}]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/AssignScreeningsToEvent/EventId/${EventID}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="544818101">Access is denied</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1373468489">EventScreeningID</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Existing Staff List for Event " enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/ExistingStaffList/Event/${EventID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Available Staff List for Event" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/AvailableStaffList/Event/${EventID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Получаем весь список персонала для ивента</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Creating variable for adding all the Staff to Event at once" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());   // получаем данные в виде строки
var objects = JSON.parse(json.serializedJSONBody);      // парсинг Json-респонса
var eventId = vars.get(&quot;EventID&quot;);                      //объявляем переменную eventId для дальнейшего добавления в тело запроса

var ids = []; 								  		//создаем массив
for(var i in objects) {						  		// i - ключ массива, перебираем все значения по порядку
	ids.push(objects[i].StaffID);		  				//Помещаем переменную StaffID в массив объектов (для каждого объекта) 
}



for(var i in objects) {						  		// i - ключ массива, перебираем все значения по порядку
	objects[i].EventID = eventId * 1;		  			//Помещаем значение переменной EventID в массив, умножение на 1 превращает строку в число
}
vars.put(&quot;AssignStaffsRequest&quot;, JSON.stringify(objects)); //объявляем переменную AssignStaffsRequest для следующего запроса. Получаем ее в виде строки.</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Создаем переменную, содержащую всю информацию о персонале, используем ее для добавления всех доступных сотрудников к определенному ивенту</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Show all Staff IDs" enabled="true">
            <stringProp name="TestPlan.comments">Создаем массив содержащий все айдишники персонала</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);

var ids = []; 								  	//создаем массив
for(var i in objects) {						  	// i - ключ массива, перебираем все значения по порядку
	ids.push(objects[i].StaffID);				//Помещаем переменную в массив, то есть создаем массив со значениями всех StaffID	
}

vars.put(&quot;DEBUG_StaffIDs&quot;, JSON.stringify(ids));         // вывод в дебаггер
vars.putObject(&quot;StaffIDs&quot;, ids);					// инициализация объекта EventIDs, для следующего запроса

</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Show Staff Full names" enabled="true">
            <stringProp name="TestPlan.comments">Создаем массив содержащий все имена персонала</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);

var ids = []; 								  	//создаем массив
for(var i in objects) {						  	// i - ключ массива, перебираем все значения по порядку
	ids.push(objects[i].FullName);				//Помещаем переменную в массив, то есть создаем массив со значениями всех FullName
}

vars.put(&quot;DEBUG_FullNames&quot;, JSON.stringify(ids));       // вывод в дебаггер
vars.putObject(&quot;StaffIDs&quot;, ids);					// инициализация объекта EventIDs, для следующего запроса

</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-232903717">StaffID</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Assign Staffs To Event (Add All existing staffs to event)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${AssignStaffsRequest}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/AssignStaffsToEvent/EventId/${EventID}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">The request contains only StaffID</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Assign Random Staffs To Event" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[{&quot;StaffID&quot;:${randomStaffID},&quot;FirstName&quot;:&quot;&quot;,&quot;LastName&quot;:&quot;&quot;,&quot;MiddleName&quot;:&quot;&quot;,&quot;FullName&quot;:&quot;&quot;,&quot;OrganizationUnitID&quot;:0,&quot;OrganizationUnitName&quot;:null,&quot;EventID&quot;:${EventID}}]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/AssignStaffsToEvent/EventId/${EventID}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">The request can contain only StaffID value</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="Get Random StaffID from array (BSF PreProcessor)" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var StaffIDs = vars.getObject(&quot;StaffIDs&quot;)					     //инициализируем массив
var randomElement=Math.floor(Math.random() * StaffIDs.length); 		// инициализируем переменную для случайного ключа из массива

vars.put(&quot;randomStaffID&quot;, StaffIDs[randomElement]);                   //объявляем переменную для запроса
vars.put(&quot;DEBUG_randomStaffID&quot;, StaffIDs[randomElement]);			//выводим ее значение в дебаггер</stringProp>
          </BSFPreProcessor>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Assign Event Screenings To Staff" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[{&quot;ScreeningID&quot;:13,&quot;ScreeningName&quot;:&quot;Blood Pressure&quot;,&quot;Description&quot;:&quot;Blood Pressure&quot;,&quot;StaffID&quot;:${randomStaffID}},{&quot;ScreeningID&quot;:12,&quot;ScreeningName&quot;:&quot;Body Mass Index&quot;,&quot;Description&quot;:&quot;Body Mass Index&quot;,&quot;StaffID&quot;:${randomStaffID}},{&quot;ScreeningID&quot;:14,&quot;ScreeningName&quot;:&quot;Bone Mineral Density&quot;,&quot;Description&quot;:&quot;Bone Mineral Density&quot;,&quot;StaffID&quot;:${randomStaffID}},{&quot;ScreeningID&quot;:8,&quot;ScreeningName&quot;:&quot;Expected Results&quot;,&quot;Description&quot;:&quot;Expected Results&quot;,&quot;StaffID&quot;:${randomStaffID}},{&quot;ScreeningID&quot;:9,&quot;ScreeningName&quot;:&quot;Glucose&quot;,&quot;Description&quot;:&quot;Expected Results&quot;,&quot;StaffID&quot;:${randomStaffID}},{&quot;ScreeningID&quot;:10,&quot;ScreeningName&quot;:&quot;Hemoglobin&quot;,&quot;Description&quot;:&quot;Glucose Note List&quot;,&quot;StaffID&quot;:${randomStaffID}},{&quot;ScreeningID&quot;:11,&quot;ScreeningName&quot;:&quot;Nephropathy&quot;,&quot;Description&quot;:&quot;Nephropathy&quot;,&quot;StaffID&quot;:${randomStaffID}},{&quot;ScreeningID&quot;:15,&quot;ScreeningName&quot;:&quot;Spirometry&quot;,&quot;Description&quot;:&quot;Spirometry&quot;,&quot;StaffID&quot;:${randomStaffID}},{&quot;ScreeningID&quot;:7,&quot;ScreeningName&quot;:&quot;Cholesterol&quot;,&quot;Description&quot;:&quot;Cholesterol&quot;,&quot;StaffID&quot;:${randomStaffID}}]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${screeningpath}/AssignEventScreeningsToStaff/Event/${EventID}/Staff/${randomStaffID}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Admin area -  filter staff and events by organization" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1413799318000</longProp>
        <longProp name="ThreadGroup.end_time">1413799318000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login as Admin" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${Login}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;sessionKey&quot;, serializedJSONBody.SessionKey);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2086632421">Eugene</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1037686455">Invalid Username or password</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Staff Organization (all organizations)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${userpath}/GetStaff/Organization/0</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2136803643">FirstName</stringProp>
              <stringProp name="-1394955679">LastName</stringProp>
              <stringProp name="1175245280">MiddleName</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Staff Organization (Organization 1)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${userpath}/GetStaff/Organization/4</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-232903717">StaffID</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Staff Organization (Organization 2)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${userpath}/GetStaff/Organization/1</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-232903717">StaffID</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Staff Organization (Organization 3)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${userpath}/GetStaff/Organization/6</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-232903717">StaffID</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Staff administration- Create new staff using JS (static)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1413963981000</longProp>
        <longProp name="ThreadGroup.end_time">1413963981000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login as Admin (Generated Data)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${Login}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;sessionKey&quot;, serializedJSONBody.SessionKey);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2086632421">Eugene</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1037686455">Invalid Username or password</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create new staff (Generating all parameters automaticaly)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;RoleId&quot;:3,&quot;FirstName&quot;:&quot;${FirstName}&quot;,&quot;MiddleName&quot;:&quot;&quot;,&quot;LastName&quot;:&quot;${LastName}&quot;,&quot;UserName&quot;:&quot;${UserName}&quot;,&quot;Email&quot;:&quot;${Email}&quot;,&quot;Organizations&quot;:[{&quot;OrganizationUnitID&quot;:4,&quot;OrganizationUnitName&quot;:&quot;Commercial&quot;},{&quot;OrganizationUnitID&quot;:1,&quot;OrganizationUnitName&quot;:&quot;Medicare&quot;},{&quot;OrganizationUnitID&quot;:6,&quot;OrganizationUnitName&quot;:&quot;Work Partners - Fitness&quot;}]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${userpath}/Staff/Add?</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="BSF - Generating all parameters using JS" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">function makeEmail() { 
	var strValues=&quot;qwertyuiopasdfghjklzxcvbnm&quot;;
	var strEmail = &quot;&quot;; 
	var strTmp; 
	for (var i=0;i&lt;4;i++) { 
		strTmp = strValues.charAt(Math.round(strValues.length*Math.random())); 
		strEmail = strEmail + strTmp; 
	} 
	strTmp = &quot;&quot;; 
	strEmail = strEmail + &quot;@&quot;; 
	for (var j=0;j&lt;3;j++) { 
		strTmp = strValues.charAt(Math.round(strValues.length*Math.random())); 
		strEmail = strEmail + strTmp; 
	} 
	strEmail = strEmail + &quot;.com&quot;

	return strEmail; 
}

function makeName()
{
    var text = &quot;&quot;;
    var possible = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;

    for( var i=0; i &lt; 7; i++ )
        text += possible.charAt(Math.floor(Math.random() * possible.length));

    return text;
}

vars.put(&quot;LastName&quot;,  makeName())
vars.put(&quot;FirstName&quot;,  makeName())
vars.put(&quot;UserName&quot;,  makeName())
vars.put(&quot;Email&quot;,  makeEmail())</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPreProcessor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;StaffID&quot;, serializedJSONBody.StaffID);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Getting event id and transfering it to variable</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1988634462">&quot;Account exist, please enter a different email.&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">20</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Staff administration- Create new staff (CSV Data) (Static)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1413963981000</longProp>
        <longProp name="ThreadGroup.end_time">1413963981000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login as Admin" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${Login}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;sessionKey&quot;, serializedJSONBody.SessionKey);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2086632421">Eugene</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1037686455">Invalid Username or password</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create new staff (Data from CSV)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;RoleId&quot;:3,&quot;FirstName&quot;:&quot;${FirstName}&quot;,&quot;MiddleName&quot;:&quot;&quot;,&quot;LastName&quot;:&quot;${LastName}&quot;,&quot;UserName&quot;:&quot;${UserName}&quot;,&quot;Email&quot;:&quot;${Email}&quot;,&quot;Organizations&quot;:[{&quot;OrganizationUnitID&quot;:4,&quot;OrganizationUnitName&quot;:&quot;Commercial&quot;},{&quot;OrganizationUnitID&quot;:1,&quot;OrganizationUnitName&quot;:&quot;Medicare&quot;},{&quot;OrganizationUnitID&quot;:6,&quot;OrganizationUnitName&quot;:&quot;Work Partners - Fitness&quot;}]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${userpath}/Staff/Add?</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">C:\Users\Andrey Makaev\Desktop\JMX\Biometric CSV\staffs.csv</stringProp>
            <boolProp name="quotedData">true</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.group</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">FirstName,LastName,UserName,Email</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;StaffID&quot;, serializedJSONBody.StaffID);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Getting event id and transfering it to variable</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1988634462">&quot;Account exist, please enter a different email.&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Staff administration CreateStaff_UpdateStaff Using JS" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1413799431000</longProp>
        <longProp name="ThreadGroup.end_time">1413799431000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Создали сотрудника, изменили его информацию, выполнинли проверку</stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login as Admin" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${Login}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;sessionKey&quot;, serializedJSONBody.SessionKey);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1037686455">Invalid Username or password</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create new staff (Generating all parameters automaticaly)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;RoleId&quot;:3,&quot;FirstName&quot;:&quot;${FirstName}&quot;,&quot;MiddleName&quot;:&quot;&quot;,&quot;LastName&quot;:&quot;${LastName}&quot;,&quot;UserName&quot;:&quot;${UserName}&quot;,&quot;Email&quot;:&quot;${Email}&quot;,&quot;Organizations&quot;:[{&quot;OrganizationUnitID&quot;:4,&quot;OrganizationUnitName&quot;:&quot;Commercial&quot;},{&quot;OrganizationUnitID&quot;:1,&quot;OrganizationUnitName&quot;:&quot;Medicare&quot;},{&quot;OrganizationUnitID&quot;:6,&quot;OrganizationUnitName&quot;:&quot;Work Partners - Fitness&quot;}]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${userpath}/Staff/Add?</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Создаем сотрудника с произвольным именем, которое генерируется в JS. Затем определяем статичные параметры для  следующего запроса</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="BSF - Generating all parameters using JS" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">function makeEmail() { 
	var strValues=&quot;qwertyuiopasdfghjklzxcvbnm&quot;;
	var strEmail = &quot;&quot;; 
	var strTmp; 
	for (var i=0;i&lt;4;i++) { 
		strTmp = strValues.charAt(Math.round(strValues.length*Math.random())); 
		strEmail = strEmail + strTmp; 
	} 
	strTmp = &quot;&quot;; 
	strEmail = strEmail + &quot;@&quot;; 
	for (var j=0;j&lt;3;j++) { 
		strTmp = strValues.charAt(Math.round(strValues.length*Math.random())); 
		strEmail = strEmail + strTmp; 
	} 
	strEmail = strEmail + &quot;.com&quot;

	return strEmail; 
}

function makeName()
{
    var text = &quot;&quot;;
    var possible = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;;

    for( var i=0; i &lt; 7; i++ )
        text += possible.charAt(Math.floor(Math.random() * possible.length));

    return text;
}

vars.put(&quot;LastName&quot;,  makeName())
vars.put(&quot;FirstName&quot;,  makeName())
vars.put(&quot;UserName&quot;,  makeName())
vars.put(&quot;Email&quot;,  makeEmail())</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPreProcessor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Getting StaffID" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;StaffID&quot;, serializedJSONBody.StaffID);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Getting StaffID and transfering it to variable</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Getting Email" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;Email&quot;, serializedJSONBody.Email);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Getting Email and transfering it to variable</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Getting Username" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;Username&quot;, serializedJSONBody.Username);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Getting Email and transfering it to variable</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Staff information updating" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">2</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Staff information updating" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;FirstName&quot;:&quot;${RenameFirstName}&quot;,&quot;MiddleName&quot;:&quot;&quot;,&quot;LastName&quot;:&quot;${RenameLastName}&quot;,&quot;UserName&quot;:&quot;${Username}&quot;,&quot;RoleId&quot;:3,&quot;Email&quot;:&quot;${Email}&quot;,&quot;StaffId&quot;:${StaffID},&quot;Organizations&quot;:[{&quot;OrganizationUnitID&quot;:4,&quot;OrganizationUnitName&quot;:&quot;Commercial&quot;},{&quot;OrganizationUnitID&quot;:1,&quot;OrganizationUnitName&quot;:&quot;Medicare&quot;},{&quot;OrganizationUnitID&quot;:6,&quot;OrganizationUnitName&quot;:&quot;Work Partners - Fitness&quot;}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${userpath}/Staff/Update?</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">Данные для переименования берем из CSV файла</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Rename Staff CSV Data" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">C:\Users\Andrey Makaev\Desktop\JMX\Biometric CSV\Staffsnames.csv</stringProp>
              <boolProp name="quotedData">true</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.group</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">RenameFirstName,RenameLastName</stringProp>
              <stringProp name="TestPlan.comments">Объявдяем переменные RenameFirstName,RenameLastName. Получаем их значения из CSV файла</stringProp>
            </CSVDataSet>
            <hashTree/>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);

// Способ инициализации переменных 1: 
//vars.put(&quot;StaffID&quot;, serializedJSONBody.StaffID);
//vars.put(&quot;RenamedFirstName&quot;, serializedJSONBody.FirstName);

//var RenamedFirstName = vars.get(&quot;RenamedFirstName&quot;);
//var RenameFirstname = vars.get(&quot;RenameFirstName&quot;)

// Способ инициализации переменных 2:
var RenamedFirstName = serializedJSONBody.FirstName;
var RenameFirstname = vars.get(&quot;RenameFirstName&quot;)

//Проверка данных:
if (RenamedFirstName == RenameFirstname) {       //Cравниваем переменные в памяти Javascript.
       prev.setSuccessful(true);      			// Если значения не совпадают, то запрос не фейлится
	  prev.setResponseMessage(&quot;Staff name was successfully changed&quot;); // Иначе, видим сообщение, о том, что все OK)

}
else {
 	  prev.setResponseMessage(&quot;Staff name wasn&apos;t changed&quot;); // Иначе, видим сообщение, о том, что все OK)	
} </stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="TestPlan.comments">Getting staff id and transfering it to variable</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting organizations list" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${userpath}/Staff/Organizations/${StaffID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1399154838">Commercial</stringProp>
              <stringProp name="-836068146">Medicare</stringProp>
              <stringProp name="304252175">Work Partners - Fitness</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting staff details" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${userpath}/Staff/Details/${StaffID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1394955679">LastName</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="List of Staff Organizations " enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/Staff/Organizations</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1399154838">Commercial</stringProp>
              <stringProp name="304252175">Work Partners - Fitness</stringProp>
              <stringProp name="-836068146">Medicare</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Event dashboard" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1413909533000</longProp>
        <longProp name="ThreadGroup.end_time">1413909533000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Перебираем все открытые ивенты и получаем список обследований для каждого из них</stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${Login}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Getting authorization key for the next steps</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;sessionKey&quot;, serializedJSONBody.SessionKey);
vars.put(&quot;StaffID&quot;, serializedJSONBody.StaffID);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-670529065">Invalid</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting All open events" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="StaffID" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">StaffID</stringProp>
                <stringProp name="Argument.value">${StaffID}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/Events/Allopenevents/Staff</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);


var ids = []; 								  	//создаем массив
for(var i in objects) {						  	// i - ключ массива, перебираем все значения по порядку
	ids.push(objects[i].EventID);		  	//Помещаем переменную в массив
}


vars.put(&quot;EventIDs_DEBUG&quot;, JSON.stringify(ids));
vars.putObject(&quot;EventIDs&quot;, ids);


vars.put(&quot;EventIDCounter&quot;, ids.length);        	// длина массива    
vars.put(&quot;EventIDCounter_DEBUG&quot;, ids.length);  	// вывод в дебаггер</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Getting  Member screening ids</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Getting list of screenings of  the selected event" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${EventIDCounter}</stringProp>
        </LoopController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">0</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">Step</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Event Dashboard of the selected event" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${servicepath}/Dashboard/Events/Event/${CurrentEventID}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2000391191">RegisteredMembers</stringProp>
                <stringProp name="749531113">StaffAvailable</stringProp>
                <stringProp name="1162873070">EventDashboardTableDetails</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="BSF PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var EventIDs = vars.getObject(&quot;EventIDs&quot;),
    Step = vars.get(&quot;Step&quot;),
    CurrentEventID = EventIDs[Step]; 	// создаем переменную в памяти Jmeter
    
vars.put(&quot;CurrentEventID&quot;, CurrentEventID); 		//инициализируем переменную в памяти JS  то же самое если... /*vars.put(&quot;FormID&quot;, ScreeningIds[Step]);*/
</stringProp>
            </BSFPreProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting list of screenings for the selected event" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${screeningpath}/Screenings/Event/${CurrentEventID}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">${screeningpath}/Screenings/Event/49</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="BSF PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var EventIDs = vars.getObject(&quot;EventIDs&quot;),
    Step = vars.get(&quot;Step&quot;),
    CurrentEventID = EventIDs[Step]; 	// создаем переменную в памяти Jmeter
    
vars.put(&quot;CurrentEventID&quot;, CurrentEventID); 		//инициализируем переменную в памяти JS  то же самое если... /*vars.put(&quot;FormID&quot;, ScreeningIds[Step]);*/
</stringProp>
            </BSFPreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting provider types for the selected event" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/BiometricProviderService/ProviderTypes</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-184058346">ProviderTypeName</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Event Members" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1418816101000</longProp>
        <longProp name="ThreadGroup.end_time">1418816101000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login as Admin" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${Login}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;sessionKey&quot;, serializedJSONBody.SessionKey);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="840213143">Invalid username or password</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create new event." enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;OpenTime&quot;:&quot;2014-10-21T09:00:00.00&quot;,&quot;CloseTime&quot;:&quot;2014-10-21T21:00:00.00&quot;,&quot;IsOpen&quot;:1,&quot;OrderingPhysicianID&quot;:97,&quot;ReferringPhysicianID&quot;:94,&quot;OrganizationUnitID&quot;:4,&quot;EventDate&quot;:&quot;2014-10-21T12:00:00.00&quot;,&quot;LocationID&quot;:47,&quot;EventTypeID&quot;:4,&quot;IntervalTimeID&quot;:5,&quot;EventName&quot;:&quot;JM2 testing commercial&quot;,&quot;EventDescription&quot;:&quot;Jm&quot;,&quot;MaxRegistrationsForInterval&quot;:2}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/Event/Add?</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Create new event.</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;EventID&quot;, serializedJSONBody.EventID);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Getting event id and transfering it to variable</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="288150805">EventID</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting all members assigned to event" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/Event/Members/${EventID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting all Checked In Members" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${memberpath}/CheckedInMembers/Event/${EventID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="19 ${screeningpath}/MemberScreening/LoadForm/624" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/LoadForm/624</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-us</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (iPad; CPU OS 7_1_2 like Mac OS X) AppleWebKit/537.51.2 (KHTML, like Gecko) Mobile/11D257 (375729808)</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="29 ${screeningpath}/MemberScreening/SaveForm/624" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[{&quot;MemberScreeningID&quot;:624,&quot;MeasureID&quot;:&quot;86&quot;,&quot;MeasureValue&quot;:&quot;1&quot;,&quot;CreatedDate&quot;:&quot;2014-12-17T12:00:05&quot;},{&quot;MemberScreeningID&quot;:624,&quot;MeasureID&quot;:&quot;88&quot;,&quot;MeasureValue&quot;:&quot;401&quot;,&quot;CreatedDate&quot;:&quot;2014-12-17T12:00:05&quot;},{&quot;MemberScreeningID&quot;:624,&quot;MeasureID&quot;:&quot;90&quot;,&quot;MeasureValue&quot;:&quot;203&quot;,&quot;CreatedDate&quot;:&quot;2014-12-17T12:00:05&quot;},{&quot;MemberScreeningID&quot;:624,&quot;MeasureID&quot;:&quot;91&quot;,&quot;MeasureValue&quot;:&quot;23&quot;,&quot;CreatedDate&quot;:&quot;2014-12-17T12:00:05&quot;},{&quot;MemberScreeningID&quot;:624,&quot;MeasureID&quot;:&quot;89&quot;,&quot;MeasureValue&quot;:&quot;22&quot;,&quot;CreatedDate&quot;:&quot;2014-12-17T12:00:05&quot;},{&quot;MemberScreeningID&quot;:624,&quot;MeasureID&quot;:&quot;92&quot;,&quot;MeasureValue&quot;:&quot;14&quot;,&quot;CreatedDate&quot;:&quot;2014-12-17T12:00:05&quot;},{&quot;MemberScreeningID&quot;:624,&quot;MeasureID&quot;:&quot;96&quot;,&quot;MeasureValue&quot;:&quot;3&quot;,&quot;CreatedDate&quot;:&quot;2014-12-17T12:00:05&quot;},{&quot;MemberScreeningID&quot;:624,&quot;MeasureID&quot;:&quot;99&quot;,&quot;MeasureValue&quot;:&quot;Test&quot;,&quot;CreatedDate&quot;:&quot;2014-12-17T12:00:05&quot;}]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/SaveForm/624</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-us</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">file://</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (iPad; CPU OS 7_1_2 like Mac OS X) AppleWebKit/537.51.2 (KHTML, like Gecko) Mobile/11D257 (375729808)</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="20 ${screeningpath}/MemberScreening/LoadForm/625" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/LoadForm/625</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-us</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (iPad; CPU OS 7_1_2 like Mac OS X) AppleWebKit/537.51.2 (KHTML, like Gecko) Mobile/11D257 (375729808)</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="21 ${screeningpath}/MemberScreening/LoadForm/626" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/LoadForm/626</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-us</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (iPad; CPU OS 7_1_2 like Mac OS X) AppleWebKit/537.51.2 (KHTML, like Gecko) Mobile/11D257 (375729808)</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="22 ${screeningpath}/MemberScreening/LoadForm/627" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/LoadForm/627</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-us</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (iPad; CPU OS 7_1_2 like Mac OS X) AppleWebKit/537.51.2 (KHTML, like Gecko) Mobile/11D257 (375729808)</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="23 ${screeningpath}/MemberScreening/LoadForm/628" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/LoadForm/628</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-us</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (iPad; CPU OS 7_1_2 like Mac OS X) AppleWebKit/537.51.2 (KHTML, like Gecko) Mobile/11D257 (375729808)</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="24 ${screeningpath}/MemberScreening/LoadForm/629" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/LoadForm/629</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-us</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (iPad; CPU OS 7_1_2 like Mac OS X) AppleWebKit/537.51.2 (KHTML, like Gecko) Mobile/11D257 (375729808)</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="25 ${screeningpath}/MemberScreening/LoadForm/630" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/LoadForm/630</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-us</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (iPad; CPU OS 7_1_2 like Mac OS X) AppleWebKit/537.51.2 (KHTML, like Gecko) Mobile/11D257 (375729808)</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="26 ${screeningpath}/MemberScreening/LoadForm/631" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/LoadForm/631</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-us</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (iPad; CPU OS 7_1_2 like Mac OS X) AppleWebKit/537.51.2 (KHTML, like Gecko) Mobile/11D257 (375729808)</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="27 ${screeningpath}/MemberScreening/LoadForm/632" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/LoadForm/632</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-us</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (iPad; CPU OS 7_1_2 like Mac OS X) AppleWebKit/537.51.2 (KHTML, like Gecko) Mobile/11D257 (375729808)</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="31 ${memberpath}/CheckedInMembers/Event/18" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">${memberpath}/CheckedInMembers/Event/18</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-us</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (iPad; CPU OS 7_1_2 like Mac OS X) AppleWebKit/537.51.2 (KHTML, like Gecko) Mobile/11D257 (375729808)</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="32 ${memberpath}/EventScreenings/Staff/Member/169" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">${memberpath}/EventScreenings/Staff/Member/169</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-us</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (iPad; CPU OS 7_1_2 like Mac OS X) AppleWebKit/537.51.2 (KHTML, like Gecko) Mobile/11D257 (375729808)</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Search members by last name (Static Value)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1413909563000</longProp>
        <longProp name="ThreadGroup.end_time">1413909563000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${Login}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Getting authorization key for the next steps</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;sessionKey&quot;, serializedJSONBody.SessionKey);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-670529065">Invalid</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search walk-in member in the external DB" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="LastName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">LastName</stringProp>
                <stringProp name="Argument.value">Dom</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">biomtst.upmchp.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/BiometricMemberService/Search/HPMembers</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="544818101">Access is denied</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Checking search results (LastName) RegEx" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1413909742000</longProp>
        <longProp name="ThreadGroup.end_time">1413909742000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${Login}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Getting authorization key for the next steps</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;sessionKey&quot;, serializedJSONBody.SessionKey);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1037686455">Invalid Username or password</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Get Random name from array" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">var args=[&quot;Dom&quot;,&quot;Done&quot;,&quot;Mike&quot;,&quot;Slow&quot;,&quot;Boyle&quot;,&quot;Davis&quot;,&quot;Costa&quot;, &quot;Johnson&quot;]; //инициализируем массив
var randomElement=Math.floor(Math.random() * args.length); // случайный номер ключа из массива
vars.put(&quot;randomName&quot;, args[randomElement]); // инициализация переменной в Jmeter случайным ключом</stringProp>
          <stringProp name="scriptLanguage">javascript</stringProp>
        </BSFSampler>
        <hashTree/>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="false">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="Get Random Member Name from array (BSF PreProcessor) Denis" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var args=[&quot;Dom&quot;,&quot;Done&quot;,&quot;Mike&quot;,&quot;Slow&quot;,&quot;Boyle&quot;,&quot;Davis&quot;,&quot;Costa&quot;]; 
var randomElement=Math.floor(Math.random() * args.length); 
vars.put(&quot;randomName&quot;, args[randomElement]); 
//vars.put(&quot;randomName&quot;, &apos;davis&apos;); // инициализация переменной в Jmeter случайным ключом</stringProp>
          </BSFPreProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Members" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="LastName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">LastName</stringProp>
                <stringProp name="Argument.value">${randomName}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${memberpath}/Search/HPMembers</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Поиск мемберов, сравнение значения переменных с применением RegEx</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Variables comparing (BSF PostProcessor)" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());	//получаем данные из респонса в виде строки
var Members = JSON.parse(json.serializedJSONBody); 	// парсим респонс serializedJSONBody, результат Members будет в виде массива 

vars.putObject(&quot;Members&quot;, Members);			    //создаем объект в Jmeter, содержащий значения переменной Members
vars.put(&quot;MembersCount&quot;, Members.length);            //vars.put - объявляем переменную для запроса, считаем количество мемберов в респонсе

var Random = vars.get(&quot;randomName&quot;);			//объявляем переменную &quot;Random&quot;. Помещаем в нее значение переменной &quot;randomName&quot; 

var LastName = []; 								  //создаем массив
for(var i in Members) {						 // i - ключ массива, перебираем все значения по порядку
	var Member = Members[i];

	var expr = new RegExp(Random, &apos;i&apos;);        // Создаем регулярное выражение для поиска значения переменной в массиве LastName, &apos;i&apos; - без учета регистра
	if(Member.LastName.search(expr) == -1) {   // Ищем значение переменной Random в массиве LastName, используя значение переменной &apos;expr&apos; если значения не найдено (== -1), то  =&gt;
		LastName.push(Member.LastName);	   // =&gt; Помещаем  значение в массив LastName
	}
}
vars.put(&quot;LastNameCheck&quot;, JSON.stringify(LastName));  // Выводим несовпадающее значение в дебаггерб инициализируем для этого переменную LastNameCheck


if (LastName.length == 0) {  //сравниваем переменные в памяти Javascript
       prev.setSuccessful(true);      // Если значения не совпадают, то запрос не фейлится
	  prev.setResponseMessage(&quot;SERVER SENDS CORRECT RESPONSES&quot;); // Иначе, видим сообщение, о том, что все OK)

}
else {
 	  prev.setSuccessful(false);
 	  prev.setResponseMessage(&quot;SERVER SENDS INCORRECT RESPONSES&quot;); // Иначе, видим сообщение, о том, что все OK)	
}</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Variables comparing (BSF PostProcessor)" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());	//получаем данные из респонса в виде строки
var Members = JSON.parse(json.serializedJSONBody); 	// парсим респонс serializedJSONBody, результат Members будет в виде массива 

vars.putObject(&quot;Members&quot;, Members);			    //создаем объект в Jmeter, содержащий значения переменной Members
vars.put(&quot;MembersCount&quot;, Members.length);            //vars.put - объявляем переменную для запроса, считаем количество мемберов в респонсе

var Random = vars.get(&quot;randomName&quot;);			//объявляем переменную &quot;Random&quot;. Помещаем в нее значение переменной &quot;randomName&quot; 

var LastName = []; 								  //создаем массив
for(var i in Members) {						 // i - ключ массива, перебираем все значения по порядку
	var Member = Members[i];
	if(Member.LastName != Random ) {				// Сравниваем значени LastName из респонса со значением переменной Random, если значения не совпадают, то =&gt;
		LastName.push(Member.LastName);			// =&gt; Помещаем несовпадающее значение в массив
	}
}
vars.put(&quot;LastNameCheck&quot;, JSON.stringify(LastName));  // Выводим несовпадающее значение в дебаггерб инициализируем для этого переменную LastNameCheck


if (LastName.length == 0) {  //сравниваем переменные в памяти Javascript
       prev.setSuccessful(true);      // Если значения не совпадают, то запрос не фейлится
	  prev.setResponseMessage(&quot;SERVER SENDS CORRECT RESPONSES&quot;); // Иначе, видим сообщение, о том, что все OK)

}
else {
 	  prev.setSuccessful(false);
 	  prev.setResponseMessage(&quot;SERVER SENDS INCORRECT REQUESTS&quot;); // Иначе, видим сообщение, о том, что все OK)	
}</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Add a walk-in - Search members in external DB - Add all members - Update member information-Turn ON/OFF screenings switchers" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1413909742000</longProp>
        <longProp name="ThreadGroup.end_time">1413909742000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${Login}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Логинимся, получаем ключ авторизации</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;sessionKey&quot;, serializedJSONBody.SessionKey);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1037686455">Invalid Username or password</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Event adding" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${NewEvent}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${TestServer}</stringProp>
          <stringProp name="HTTPSampler.port">${Port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/Event/Add?</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Создаем новое событие</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;EventID&quot;, serializedJSONBody.EventID);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Getting event id and transfering it to variable</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="288150805">EventID</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Assign Staffs To Event" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[{&quot;StaffID&quot;:9,&quot;FirstName&quot;:&quot;&quot;,&quot;LastName&quot;:&quot;&quot;,&quot;MiddleName&quot;:&quot;&quot;,&quot;FullName&quot;:&quot;&quot;,&quot;OrganizationUnitID&quot;:0,&quot;OrganizationUnitName&quot;:null,&quot;EventID&quot;:49}]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${TestServer}</stringProp>
          <stringProp name="HTTPSampler.port">${Port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">${Protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/AssignStaffsToEvent/EventId/${EventID}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Добавляем персонал к событию</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="544818101">Access is denied</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Assign Screenings To Event" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[{&quot;ScreeningID&quot;:7,&quot;Description&quot;:&quot;Cholesterol&quot;,&quot;ScreeningName&quot;:&quot;Cholesterol&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:0},{&quot;ScreeningID&quot;:8,&quot;Description&quot;:&quot;Expected Results&quot;,&quot;ScreeningName&quot;:&quot;Expected Results&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:1},{&quot;ScreeningID&quot;:9,&quot;Description&quot;:&quot;Expected Results&quot;,&quot;ScreeningName&quot;:&quot;Glucose&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:2},{&quot;ScreeningID&quot;:10,&quot;Description&quot;:&quot;Glucose Note List&quot;,&quot;ScreeningName&quot;:&quot;Hemoglobin&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:3},{&quot;ScreeningID&quot;:11,&quot;Description&quot;:&quot;Nephropathy&quot;,&quot;ScreeningName&quot;:&quot;Nephropathy&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:4},{&quot;ScreeningID&quot;:12,&quot;Description&quot;:&quot;Body Mass Index&quot;,&quot;ScreeningName&quot;:&quot;Body Mass Index&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:5},{&quot;ScreeningID&quot;:13,&quot;Description&quot;:&quot;Blood Pressure&quot;,&quot;ScreeningName&quot;:&quot;Blood Pressure&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:6},{&quot;ScreeningID&quot;:14,&quot;Description&quot;:&quot;Bone Mineral Density&quot;,&quot;ScreeningName&quot;:&quot;Bone Mineral Density&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:7},{&quot;ScreeningID&quot;:15,&quot;Description&quot;:&quot;Spirometry&quot;,&quot;ScreeningName&quot;:&quot;Spirometry&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:8}]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/AssignScreeningsToEvent/EventId/${EventID}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Добавляем список обследований для события</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="544818101">Access is denied</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1373468489">EventScreeningID</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Members" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="LastName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">LastName</stringProp>
                <stringProp name="Argument.value">${randomName}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${memberpath}/Search/HPMembers</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="Get Random Member Name from array (BSF PreProcessor)" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var args=[&quot;Dom&quot;,&quot;Done&quot;,&quot;Mike&quot;,&quot;Slow&quot;,&quot;Boyle&quot;,&quot;Davis&quot;,&quot;Costa&quot;,&quot;Sanders&quot;,&quot;Smith&quot;,&quot;Kim&quot;]; 	//инициализируем массив
var randomElement=Math.floor(Math.random() * args.length); 		// случайный номер ключа из массива
vars.put(&quot;randomName&quot;, args[randomElement]); 				// инициализация переменной в Jmeter случайным ключом


</stringProp>
            <stringProp name="TestPlan.comments">Берем произвольное имя из массива</stringProp>
          </BSFPreProcessor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor  (Getting duplicated members from the response)" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());	//получаем данные из респонса в виде строки
var Members = JSON.parse(json.serializedJSONBody); 	// парсим респонс serializedJSONBody, результат Members будет в виде массива 

vars.putObject(&quot;Members&quot;, Members);			    //создаем объект в Jmeter, содержащий значения переменной Members
vars.put(&quot;MembersCount&quot;, Members.length);            //vars.put - объявляем переменную для запроса, считаем количество мемберов в респонсе. Количество объектов помещаем в переменную


var ids = []; 								  //создаем массив
for(var i in Members) {						 // i - ключ массива, перебираем все значения по порядку

	ids.push(Members[i].MemberId);			//Помещаем переменную в массив
}

vars.put(&quot;ids&quot;, JSON.stringify(ids));

function duplicate_values(arr)
{
    arr_res = [];
    arr.sort();    
    for (var i=1; i &lt; arr.length; i++) {                   
        if (arr[i] == arr[i-1]) {
            var is_unique = true; 
            for (var k=0; k &lt; arr_res.length; k++) {
                if (arr_res[k] == arr[i]) {
                    is_unique = false;
                    break;
                }
            }
            if (is_unique) {
                arr_res.push(arr[i]); 
            }
        }            
    }
    return arr_res;
}
vars.put(&quot;dublicates&quot;, JSON.stringify(duplicate_values(ids)));

</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Проверяем есть ли дубликаты айдишников в массиве, выводим дубликаты в дебаггер</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller (Adding 5 first members from the group)" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">5</stringProp>
          <stringProp name="TestPlan.comments">${MembersCount} используется для последовательного добавления каждого мембера</stringProp>
        </LoopController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">0</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">Step</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add walk-in" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;AddressIncorrect&quot;:0,&quot;ScheduledTime&quot;:&quot;2014-11-14T10:43:13&quot;,&quot;WalkIn&quot;:&quot;1&quot;,&quot;ExternalEventId&quot;:&quot;&quot;,&quot;DoNotSendResultsToMyProvider&quot;:0,&quot;ContactPreference&quot;:&quot;No&quot;,&quot;MemberId&quot;:&quot;${MemberId}&quot;,&quot;MemberName&quot;:&quot;${MemberFirstName},${MemberLastName}&quot;,&quot;FirstName&quot;:&quot;${MemberFirstName}&quot;,&quot;LastName&quot;:&quot;${MemberLastName}&quot;,&quot;Gender&quot;:&quot;${Gender}&quot;,&quot;Dob&quot;:&quot;${Dob}&quot;,&quot;Address1&quot;:&quot;${Address1}&quot;,&quot;Address2&quot;:&quot;${Address2}&quot;,&quot;State&quot;:&quot;${State}&quot;,&quot;City&quot;:&quot;${City}&quot;,&quot;ZipCode&quot;:&quot;${ZipCode}&quot;,&quot;Email&quot;:&quot;&quot;,&quot;Phone&quot;:&quot;4124870895&quot;,&quot;EventID&quot;:${EventID}}&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${memberpath}/Member?</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="BSF PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var Members = vars.getObject(&quot;Members&quot;), // берем объект из памяти Jmeter и помещаем в память Javascript
    Step = vars.get(&quot;Step&quot;), 			// инициализируем переменную Step 
    Member = Members[Step];

vars.put(&quot;DEBUG_Step&quot;, Step) // DEBUG
vars.put(&quot;DEBUG_Member&quot;, Member) //DEBUG

vars.put(&quot;MemberFirstName&quot;, Member.FirstName); // инициализируем переменные в памяти Jmeter
vars.put(&quot;MemberLastName&quot;, Member.LastName);
vars.put(&quot;MemberId&quot;, Member.MemberId);
vars.put(&quot;Address1&quot;, Member.Address1);
vars.put(&quot;Address2&quot;, Member.Address2);
vars.put(&quot;State&quot;, Member.State);
vars.put(&quot;City&quot;, Member.City);
vars.put(&quot;ZipCode&quot;, Member.ZipCode);
vars.put(&quot;Dob&quot;, Member.Dob);
vars.put(&quot;Gender&quot;, Member.Gender);
vars.put(&quot;FirstNameCheck&quot;, Member.FirstName);

vars.put(&quot;ResponseMember&quot;, JSON.stringify(Member));

</stringProp>
            </BSFPreProcessor>
            <hashTree/>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">var MemberFirstName = vars.get (&quot;MemberFirstName&quot;); // берем переменную из памяти Jmeter и помещаем в память Javascript (из PreProcessor в PostProcessor)
var FirstNameCheck = vars.get (&quot;FirstNameCheck&quot;);  // берем переменную из памяти Jmeter и помещаем в память Javascript 


if (MemberFirstName != FirstNameCheck) {
	prev.setSuccessful(false); 
     prev.setResponseMessage(&quot;Member names don&apos;t match&quot;);
     }</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </BSFPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings"/>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">${MemberFirstName}==${FirstNameCheck}</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller (Adding all the group of members from the search result)" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${MembersCount}</stringProp>
        </LoopController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">0</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">Step</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add walk-in" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;AddressIncorrect&quot;:0,&quot;ScheduledTime&quot;:&quot;2014-11-14T10:43:13&quot;,&quot;WalkIn&quot;:&quot;1&quot;,&quot;ExternalEventId&quot;:&quot;&quot;,&quot;DoNotSendResultsToMyProvider&quot;:0,&quot;ContactPreference&quot;:&quot;No&quot;,&quot;MemberId&quot;:&quot;${MemberId}&quot;,&quot;MemberName&quot;:&quot;${MemberFirstName},${MemberLastName}&quot;,&quot;FirstName&quot;:&quot;${MemberFirstName}&quot;,&quot;LastName&quot;:&quot;${MemberLastName}&quot;,&quot;Gender&quot;:&quot;${Gender}&quot;,&quot;Dob&quot;:&quot;${Dob}&quot;,&quot;Address1&quot;:&quot;${Address1}&quot;,&quot;Address2&quot;:&quot;${Address2}&quot;,&quot;State&quot;:&quot;${State}&quot;,&quot;City&quot;:&quot;${City}&quot;,&quot;ZipCode&quot;:&quot;${ZipCode}&quot;,&quot;Email&quot;:&quot;&quot;,&quot;Phone&quot;:&quot;4124870895&quot;,&quot;EventID&quot;:${EventID}}&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${memberpath}/Member?</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="BSF PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var Members = vars.getObject(&quot;Members&quot;),
    Step = vars.get(&quot;Step&quot;),
    Member = Members[Step];

vars.put(&quot;MemberFirstName&quot;, Member.FirstName);
vars.put(&quot;MemberLastName&quot;, Member.LastName);
vars.put(&quot;MemberId&quot;, Member.MemberId);
vars.put(&quot;Address1&quot;, Member.Address1);
vars.put(&quot;Address2&quot;, Member.Address2);
vars.put(&quot;State&quot;, Member.State);
vars.put(&quot;City&quot;, Member.City);
vars.put(&quot;ZipCode&quot;, Member.ZipCode);
vars.put(&quot;Dob&quot;, Member.Dob);
vars.put(&quot;Gender&quot;, Member.Gender);


vars.put(&quot;ResponseMember&quot;, JSON.stringify(Member));

</stringProp>
            </BSFPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1886761664">&quot;An error has occured. If this error continues please contact your system administrator.&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">6</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add walk-in" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;EventID&quot;:${EventID},&quot;Gender&quot;:&quot;F&quot;,&quot;Dob&quot;:&quot;1997-10-21T12:00:00&quot;,&quot;ContactPreference&quot;:&quot;Yes&quot;,&quot;DoNotSendResultsToMyProvider&quot;:0,&quot;State&quot;:&quot;AR&quot;,&quot;FirstName&quot;:&quot;Viktoria&quot;,&quot;LastName&quot;:&quot;Sotn&quot;,&quot;MemberId&quot;:&quot;0022675757&quot;,&quot;Email&quot;:&quot;visloa@lo.pp&quot;,&quot;Address1&quot;:&quot;Address&quot;,&quot;City&quot;:&quot;City&quot;,&quot;ZipCode&quot;:&quot;75767&quot;,&quot;EmployerName&quot;:&quot;Templ&quot;,&quot;Address2&quot;:&quot;Paris Saint Martre&quot;,&quot;Phone&quot;:&quot;(555)767-5555&quot;,&quot;Notes&quot;:&quot;&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${memberpath}/Member?</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;MemberKey&quot;, serializedJSONBody.MemberKey);

vars.put(&quot;PhoneNumber&quot;, serializedJSONBody.Phone);
vars.put(&quot;EmailAddress&quot;, serializedJSONBody.Email); 

var PhoneNumber = vars.get (&quot;PhoneNumber&quot;);
	if (PhoneNumber != &quot;(555)767-5555&quot;) {  //сравниваем переменные в памяти Javascript
       prev.setSuccessful(false);      // Если значения не совпадают, то запрос не фейлится
	  prev.setResponseMessage(&quot;PHONE NUMBERS IN THE REQUEST AND IN THE RESPONSE DON&apos;T MATCH&quot;); // Иначе, видим сообщение, о том, что все OK)

}
	else {
 	  prev.setResponseMessage(&quot;PHONE NUMBER IS SAVED CORRECTLY&quot;); // Иначе, видим сообщение, о том, что все OK)	
} </stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting member information view" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${memberpath}/Member/${MemberKey}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update member information (Phone number)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;Phone&quot;:&quot;(000)767-0000&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${memberpath}/Member/Update/${MemberKey}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">prev.setResponseMessage(&quot;SOMETHING GOES WRONG&quot;); 	// Сообщаем запросу что он изначально не валидный, но если все условия ниже выполняются корректно, то мы увидим другие сообщения и статус запроса. Если не выполнятся, то запрос не валидный	
eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;ChangedPhone&quot;, serializedJSONBody.Phone);

var ChangedPhone = vars.get (&quot;ChangedPhone&quot;);
var PhoneNumber = vars.get (&quot;PhoneNumber&quot;);

if (ChangedPhone == PhoneNumber) {  //сравниваем переменные в памяти Javascript
       prev.setSuccessful(true);      // Если значения не совпадают, то запрос не фейлится
	  prev.setResponseMessage(&quot;PHONE NUMBER WAS CHANGED SUCCESSFULLY&quot;); // Иначе, видим сообщение, о том, что все OK)
}
else {
	  prev.setSuccessful(false);
	  prev.setResponseMessage(&quot;PHONE NUMBER WASN&apos;T CHANGED&quot;); 
}</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update member information (Email)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;Email&quot;:&quot;slvik@vk.uk&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${memberpath}/Member/Update/${MemberKey}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1958721550">slvik@vk.uk</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;ChangedMail&quot;, serializedJSONBody.Email);

var ChangedMail = vars.get (&quot;ChangedMail&quot;);
var EmailAddress = vars.get (&quot;EmailAddress&quot;);

	if (ChangedMail != EmailAddress) {  //сравниваем переменные в памяти Javascript
       prev.setSuccessful(true);      // Если значения не совпадают, то запрос фейлится
}
	else {
 	prev.setResponseMessage(&quot;EMAIL WAS CHANGED SUCCESSFULLY&quot;); // Иначе, видим сообщение, о том, что все OK)
} </stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search providers (&quot;searchFieldValue&quot;:&quot;Mike&quot;)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[{&quot;searchFieldName&quot;:&quot;PROV_TYPE&quot;,&quot;searchFieldType&quot;:16,&quot;searchFieldValue&quot;:&quot;&quot;},{&quot;searchFieldName&quot;:&quot;PROV_KEY&quot;,&quot;searchFieldType&quot;:11,&quot;searchFieldValue&quot;:&quot;&quot;},{&quot;searchFieldName&quot;:&quot;SPECIALTY_KEY&quot;,&quot;searchFieldType&quot;:18,&quot;searchFieldValue&quot;:&quot;&quot;},{&quot;searchFieldName&quot;:&quot;LASTNAME&quot;,&quot;searchFieldType&quot;:16,&quot;searchFieldValue&quot;:&quot;Mike&quot;},{&quot;searchFieldName&quot;:&quot;ZIP&quot;,&quot;searchFieldType&quot;:16,&quot;searchFieldValue&quot;:&quot;&quot;},{&quot;searchFieldName&quot;:&quot;DISTANCE&quot;,&quot;searchFieldType&quot;:16,&quot;searchFieldValue&quot;:&quot;&quot;}]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">m.upmchp.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/MobileServices/ProviderSearchService/SearchProvider</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-us</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">file://</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Authorization2" elementType="Header">
                <stringProp name="Header.name">Authorization2</stringProp>
                <stringProp name="Header.value">Basic PrivateKey:kdQiii6ljQ09yEUocgUnGgK50lO2nuW9XPKIGklQrJn4mAmYdSFutbZJtcyHE7pVOwqrdm637XEmPU0flsXCpbQS8RGDTqSdLyjmpRgV1SessionKey:${sessionKey}</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (iPad; CPU OS 8_1 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Mobile/12B410 (375852928)</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value"></stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2398230">Mike</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add own provider" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;State&quot;:&quot;RI&quot;,&quot;ProviderTypeID&quot;:4,&quot;FirstName&quot;:&quot;Lincoln&quot;,&quot;LastName&quot;:&quot;Adwall&quot;,&quot;Address1&quot;:&quot;New city commercial street 28&quot;,&quot;Address2&quot;:&quot;New city commercial street 28&quot;,&quot;City&quot;:&quot;City&quot;,&quot;ZipCode&quot;:&quot;27746&quot;,&quot;Specialty&quot;:&quot;Psychologies&quot;,&quot;Phone&quot;:&quot;(334)900-9978&quot;,&quot;FullName&quot;:&quot;Adwall, Lincoln&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${memberpath}/MemberProvider/Member/${MemberKey}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-2096352532">ProviderID</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting member providers" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/BiometricMemberService/MemberProvider/Member/${MemberKey}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2136803643">FirstName</stringProp>
              <stringProp name="-1394955679">LastName</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);


var ProviderIDs = []; 								  	//создаем массив
for(var i in objects) {						  	// i - ключ массива, перебираем все значения по порядку
	ProviderIDs.push(objects[i].ProviderID);		  	//Помещаем переменную в массив &quot;Каждый ключ массива objects кладем в массив ProviderIDs&quot;
}

vars.put(&quot;DEBUG_ProviderIDs&quot;, JSON.stringify(ProviderIDs)); // для вывода в дебаггер
vars.putObject(&quot;ProviderIDs&quot;, ProviderIDs); // переменная для следующего запроса

vars.put(&quot;ProviderIDsCounter&quot;, ProviderIDs.length);        	// длина массива    
vars.put(&quot;DEBUG_ProviderIDsCounter&quot;, ProviderIDs.length);  	// вывод в дебаггер

if (ProviderIDs.length == 0) {  //сравниваем переменную в памяти Javascript с нужным нам значением
      prev.setSuccessful(true);      // Если значения равно 0, то запрос не фейлится
	 prev.setResponseMessage(&quot;NO PROVIDERS FOUND&quot;);  // видим сообщение о том, что запрос прошел удачно
} 
else if (ProviderIDs.length &gt; 0) {
	prev.setSuccessful(true);
	prev.setResponseMessage(&quot;PROVIDERS WERE FOUND&quot;); 
}
else {
 	prev.setSuccessful(false);
 	prev.setResponseMessage(&quot;SOMETHING GOES WRONG&quot;); // Иначе, видим сообщение, о том, что все плохо)
} </stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Remove member providers" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${ProviderIDsCounter}</stringProp>
        </LoopController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">0</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">Step</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Remove Memer&apos;s provider" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${memberpath}/MemberProvider/Remove/Member/${MemberKey}/Provider/${CurrentProviderID}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="BSF PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var ProviderIDs = vars.getObject(&quot;ProviderIDs&quot;),
    Step = vars.get(&quot;Step&quot;),
    CurrentProviderID = ProviderIDs[Step]; // создаем переменную в памяти Jmeter, каждый шаг получает свое значение
    
vars.put(&quot;CurrentProviderID&quot;, CurrentProviderID); 		//инициализируем переменную в памяти JS  то же самое если... /*vars.put(&quot;FormID&quot;, ScreeningIds[Step]);*/
</stringProp>
            </BSFPreProcessor>
            <hashTree/>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);

var ids = []; 								  	//создаем массив
for(var i in objects) {						  	// i - ключ массива, перебираем все значения по порядку
	ids.push(objects[i].MemberKey);		  		//Помещаем переменную в массив
}


vars.put(&quot;MemberKeys_DEBUG&quot;, JSON.stringify(ids));
vars.putObject(&quot;MemberKeys&quot;, ids);

vars.put(&quot;MemberKeysCounter&quot;, ids.length);        	// длина массива    
vars.put(&quot;MemberKeysCounter_DEBUG&quot;, ids.length);  	// вывод в дебаггер
</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="TestPlan.comments">Getting  Member screening ids</stringProp>
            </BSFPostProcessor>
            <hashTree/>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor 2" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var Result = json.serializedJSONBody;


if (Result == &quot;1 record successfully updated.&quot;) {  //сравниваем переменные в памяти Javascript
       prev.setSuccessful(true);      			// Если значения не совпадают, то запрос не фейлится
	  prev.setResponseMessage(&quot;1 record successfully updated&quot;); // Иначе, видим сообщение, о том, что все OK)

}
else {
 	  prev.setResponseMessage(&quot;WRONG&quot;); // Иначе, видим сообщение, о том, что все OK)	
} </stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="TestPlan.comments">compare variables</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Remove Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add own provider" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;FirstName&quot;:&quot;William&quot;,&quot;LastName&quot;:&quot;Andersen&quot;,&quot;FullName&quot;:&quot;William Andersen, MD&quot;,&quot;Address1&quot;:&quot;Suite A&quot;,&quot;Address2&quot;:&quot;190 North Pointe Boulevard&quot;,&quot;City&quot;:&quot;Lancaster&quot;,&quot;State&quot;:&quot;PA&quot;,&quot;ZipCode&quot;:&quot;17601&quot;,&quot;Specialty&quot;:&quot;Dermatology&quot;,&quot;Phone&quot;:&quot;17175606444&quot;,&quot;ProviderKey&quot;:&quot;11023&quot;,&quot;ProviderTypeID&quot;:1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${memberpath}/MemberProvider/Member/${MemberKey}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-2096352532">ProviderID</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Member Screenings List" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${memberpath}/EventScreenings/Member/${MemberKey}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);


var ids = []; 								  	//создаем массив
for(var i in objects) {						  	// i - ключ массива, перебираем все значения по порядку
	ids.push(objects[i].ScreeningID);		  	//Помещаем переменную в массив
}


vars.put(&quot;MemberScreeningsID_DEBUG&quot;, JSON.stringify(ids));
vars.putObject(&quot;MemberScreeningsID&quot;, ids);


vars.put(&quot;MemberScreeningsIDCounter&quot;, ids.length);        	// длина массива    
vars.put(&quot;MemberScreeningsIDCounter_DEBUG&quot;, ids.length);  	// вывод в дебаггер</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Getting  Member screening ids</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update member screenings (Turn ON or Turn OFF random switcher)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">biomtst.upmchp.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/BiometricMemberService/SetScreenings/Member/${MemberKey}/ScreeningID/${randomScreeningID}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="Get Random ScreeningID (Green switcher) (BSF PreProcessor)" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var args = vars.getObject(&quot;MemberScreeningsID&quot;);
var randomElement=Math.floor(Math.random() * args.length);

vars.put(&quot;randomScreeningID&quot;, args[randomElement]); </stringProp>
          </BSFPreProcessor>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Update ALL member screenings (Turn ON / OFF switchers)" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${MemberScreeningsIDCounter}</stringProp>
          <stringProp name="TestPlan.comments">Adding amount of Steps</stringProp>
        </LoopController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">0</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">Step</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update member screenings (Turn ON / OFF switchers)" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/BiometricMemberService/SetScreenings/Member/${MemberKey}/ScreeningID/${SwitcherID}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="BSF PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var MemberScreeningsID = vars.getObject(&quot;MemberScreeningsID&quot;),
    Step = vars.get(&quot;Step&quot;),
    SwitcherID = MemberScreeningsID[Step]; 	// создаем переменную в памяти Jmeter
    
vars.put(&quot;SwitcherID&quot;, SwitcherID); 		//инициализируем переменную в памяти JS  то же самое если... /*vars.put(&quot;FormID&quot;, ScreeningIds[Step]);*/
</stringProp>
            </BSFPreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="List of providers of the member" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${memberpath}/MemberProvider/Member/${MemberKey}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="544818101">Access is denied</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Member Screenings Gaps" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${memberpath}/MemberScreenings/Gaps/Member/${MemberKey}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="544818101">Access is denied</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Event Documents" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${memberpath}/MemberEventDocuments/Event/${EventID}/Member/${MemberKey}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);


var DocumentIDs = []; 								  	//создаем пустой массив
for(var i in objects) {						  			// i - ключ массива, перебираем все значения по порядку
	DocumentIDs.push(objects[i].EventTypeDocumentID);		  	//Помещаем переменную в массив &quot;Каждый ключ массива objects кладем в массив DocumentIDs&quot;
}

vars.put(&quot;DEBUG_DocumentIDs&quot;, JSON.stringify(DocumentIDs)); 	// для вывода в дебаггер
vars.putObject(&quot;DocumentIDs&quot;, ProviderIDs); 					// переменная для следующего запроса

</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting document" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${memberpath}/MemberDocument/Member/${MemberKey}/Document/6</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="544818101">Access is denied</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1178524598">DocumentId</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sign User Document" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&#xd;
&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">biomtst.upmchp.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/BiometricMemberService/MemberDocument/Member/188/Document/6</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Event Document Status" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">${memberpath}/MemberEventDocumentStatus/Event/${EventID}/Member/${MemberKey}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">(signed or not)</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="544818101">Access is denied</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1137796246">EventTypeDocumentID</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CheckIn Member" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${memberpath}/CheckInMember/Member/${MemberKey}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CheckIn Member (no assigned screenings)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${memberpath}/CheckInMember/Member/224</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="156406900">&quot;Atleast one screening need to be assigned.&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Check in testing" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1413960889000</longProp>
        <longProp name="ThreadGroup.end_time">1413960889000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${Login}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Getting authorization key for the next steps</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;sessionKey&quot;, serializedJSONBody.SessionKey);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-670529065">Invalid</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create new Event Commercial" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${NewEvent}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/Event/Add?</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Create new event.</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;EventID&quot;, serializedJSONBody.EventID);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Getting event id and transfering it to variable</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="288150805">EventID</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create new event. Fitness" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${NewEventFit}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/Event/Add?</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Create new event. Fitness</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;EventID&quot;, serializedJSONBody.EventID);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Getting event id and transfering it to variable</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="288150805">EventID</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create new event. Medicare" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${NewEventMed}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/Event/Add?</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Create new event. Medicare</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;EventID&quot;, serializedJSONBody.EventID);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Getting event id and transfering it to variable</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="288150805">EventID</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="Get Random Member Name from array (BSF PreProcessor)" enabled="true">
          <stringProp name="scriptLanguage">javascript</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">var args=[&quot;Dom&quot;,&quot;Done&quot;,&quot;Mike&quot;,&quot;Slow&quot;,&quot;Boyle&quot;,&quot;Davis&quot;,&quot;Costa&quot;,&quot;Germanos&quot;,&quot;Tim&quot;]; 	//инициализируем массив
var randomElement=Math.floor(Math.random() * args.length); 		// случайный номер ключа из массива
vars.put(&quot;randomName&quot;, args[randomElement]); 				// инициализация переменной в Jmeter случайным ключом


</stringProp>
        </BSFPreProcessor>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Members" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="LastName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">LastName</stringProp>
                <stringProp name="Argument.value">${randomName}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${memberpath}/Search/HPMembers</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());	//получаем данные из респонса в виде строки
var Members = JSON.parse(json.serializedJSONBody); 	// парсим респонс serializedJSONBody, результат Members будет в виде массива 

vars.putObject(&quot;Members&quot;, Members);			    //создаем объект в Jmeter, содержащий значения переменной Members
vars.put(&quot;MembersCount&quot;, Members.length);            //vars.put - объявляем переменную для запроса, считаем количество мемберов в респонсе


var ids = []; 								  //создаем массив
for(var i in Members) {						 // i - ключ массива, перебираем все значения по порядку

	ids.push(Members[i].MemberId);			//Помещаем переменную в массив
}

vars.put(&quot;ids&quot;, JSON.stringify(ids));


</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Getting duplicated members from the response</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting All Members list (Checked in and Not Checked in)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/BiometricEventService/Event/Members/${EventID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);


var ids = []; 								  	//создаем массив
for(var i in objects) {						  	// i - ключ массива, перебираем все значения по порядку
	ids.push(objects[i].MemberKey);		  	//Помещаем переменную в массив
}


vars.put(&quot;MemberKeys_DEBUG&quot;, JSON.stringify(ids));
vars.putObject(&quot;MemberKeys&quot;, ids);


vars.put(&quot;MemberKeysCounter&quot;, ids.length);        	// длина массива    
vars.put(&quot;MemberKeysCounter_DEBUG&quot;, ids.length);  	// вывод в дебаггер
</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Getting  Member screening ids</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting all Checked In Members" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${memberpath}/CheckedInMembers/Event/${EventID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);


var ids = []; 								  	//создаем массив
for(var i in objects) {						  	// i - ключ массива, перебираем все значения по порядку
	ids.push(objects[i].MemberKey);		  	//Помещаем переменную в массив
}


vars.put(&quot;MemberKeys_DEBUG&quot;, JSON.stringify(ids));
vars.putObject(&quot;MemberKeys&quot;, ids);


vars.put(&quot;MemberKeysCounter&quot;, ids.length);        	// длина массива    
vars.put(&quot;MemberKeysCounter_DEBUG&quot;, ids.length);  	// вывод в дебаггер
</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Getting  Member screening ids</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting Member information (Random Selected member)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${memberpath}/Member/${randomKey}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="Get Random Member Name from array (BSF PreProcessor)" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var args = vars.getObject(&quot;MemberKeys&quot;);
var randomElement=Math.floor(Math.random() * args.length);

vars.put(&quot;randomKey&quot;, args[randomElement]); </stringProp>
          </BSFPreProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Event Document Status (Event/Member)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${memberpath}/MemberEventDocumentStatus/Event/${EventID}/Member/${randomKey}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Member Screenings List" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${memberpath}/EventScreenings/Member/${randomKey}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);


var ids = []; 								  	//создаем массив
for(var i in objects) {						  	// i - ключ массива, перебираем все значения по порядку
	ids.push(objects[i].ScreeningID);		  	//Помещаем переменную в массив
}


vars.put(&quot;MemberScreeningsID_DEBUG&quot;, JSON.stringify(ids));
vars.putObject(&quot;MemberScreeningsID&quot;, ids);


vars.put(&quot;MemberScreeningsIDCounter&quot;, ids.length);        	// длина массива    
vars.put(&quot;MemberScreeningsIDCounter_DEBUG&quot;, ids.length);  	// вывод в дебаггер</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Getting  Member screening ids</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update member screenings (Turn ON or Turn OFF random switcher)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">biomtst.upmchp.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/BiometricMemberService/SetScreenings/Member/${randomKey}/ScreeningID/${randomScreeningID}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="Get Random ScreeningID (Green switcher) (BSF PreProcessor)" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var args = vars.getObject(&quot;MemberScreeningsID&quot;);
var randomElement=Math.floor(Math.random() * args.length);

vars.put(&quot;randomScreeningID&quot;, args[randomElement]); </stringProp>
          </BSFPreProcessor>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Update ALL member screenings (Turn ON / OFF switchers)" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${MemberScreeningsIDCounter}</stringProp>
          <stringProp name="TestPlan.comments">Adding amount of Steps</stringProp>
        </LoopController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">0</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">Step</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update member screenings (Turn ON / OFF switchers)" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/BiometricMemberService/SetScreenings/Member/${randomKey}/ScreeningID/${SwitcherID}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="BSF PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var MemberScreeningsID = vars.getObject(&quot;MemberScreeningsID&quot;),
    Step = vars.get(&quot;Step&quot;),
    SwitcherID = MemberScreeningsID[Step]; 	// создаем переменную в памяти Jmeter
    
vars.put(&quot;SwitcherID&quot;, SwitcherID); 		//инициализируем переменную в памяти JS  то же самое если... /*vars.put(&quot;FormID&quot;, ScreeningIds[Step]);*/
</stringProp>
            </BSFPreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update member screenings (Screening id 9)" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">biomtst.upmchp.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/BiometricMemberService/SetScreenings/Member/${randomKey}/ScreeningID/9</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="List of providers of the member" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${memberpath}/MemberProvider/Member/${randomKey}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="544818101">Access is denied</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Member Screenings Gaps" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${memberpath}/MemberScreenings/Gaps/Member/${randomKey}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="544818101">Access is denied</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Event Documents" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${memberpath}/MemberEventDocuments/Event/${EventID}/Member/${randomKey}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="544818101">Access is denied</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting document" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${memberpath}/MemberDocument/Member/${randomKey}/Document/6</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="544818101">Access is denied</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1178524598">DocumentId</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sign User Document" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&#xd;
&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">biomtst.upmchp.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/BiometricMemberService/MemberDocument/Member/188/Document/6</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Event Document Status" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">${memberpath}/MemberEventDocumentStatus/Event/${EventID}/Member/${randomKey}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">(signed or not)</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="544818101">Access is denied</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1137796246">EventTypeDocumentID</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CheckIn Member" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${memberpath}/CheckInMember/Member/${MemberKey}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CheckIn Member (no assigned screenings)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${memberpath}/CheckInMember/Member/224</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="156406900">&quot;Atleast one screening need to be assigned.&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Screenings AutoChecking" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1413965583000</longProp>
        <longProp name="ThreadGroup.end_time">1413965583000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${Login}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Getting authorization key for the next steps</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;sessionKey&quot;, serializedJSONBody.SessionKey);
vars.put(&quot;StaffID&quot;, serializedJSONBody.StaffID);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-670529065">Invalid</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting All open events" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="StaffID" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">StaffID</stringProp>
                <stringProp name="Argument.value">${StaffID}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/Events/Allopenevents/Staff</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);


var ids = []; 								  	//создаем массив
for(var i in objects) {						  	// i - ключ массива, перебираем все значения по порядку
	ids.push(objects[i].EventID);		  	//Помещаем переменную в массив
}


vars.put(&quot;EventIDs_DEBUG&quot;, JSON.stringify(ids));
vars.putObject(&quot;EventIDs&quot;, ids);


vars.put(&quot;EventIDCounter&quot;, ids.length);        	// длина массива    
vars.put(&quot;EventIDCounter_DEBUG&quot;, ids.length);  	// вывод в дебаггер</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Getting  Member screening ids</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Getting list of screenings of  the selected event ${EventIDCounter}" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${EventIDCounter}</stringProp>
          <stringProp name="TestPlan.comments">Список обследований для каждого ивента. Var: ${EventIDCounter}</stringProp>
        </LoopController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">0</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">Step</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting List of CheckedIn Members Current Event" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">${memberpath}/CheckedInMembers/Event/${CurrentEventID}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">Список зачекиненых мемберов для каждого ивента</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="BSF PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var EventIDs = vars.getObject(&quot;EventIDs&quot;),
    Step = vars.get(&quot;Step&quot;),
    CurrentEventID = EventIDs[Step]; 	// создаем переменную в памяти Jmeter
    
vars.put(&quot;CurrentEventID&quot;, CurrentEventID); 		//инициализируем переменную в памяти JS  то же самое если... /*vars.put(&quot;FormID&quot;, ScreeningIds[Step]);*/
</stringProp>
            </BSFPreProcessor>
            <hashTree/>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);


var ids = []; 								  	//создаем массив
for(var i in objects) {						  	// i - ключ массива, перебираем все значения по порядку
	ids.push(objects[i].MemberKey);		  	//Помещаем переменную в массив
}


vars.put(&quot;MemberKeys_DEBUG&quot;, JSON.stringify(ids));
vars.putObject(&quot;MemberKeys&quot;, ids);


vars.put(&quot;MemberKeysCounter&quot;, ids.length);        	// длина массива    
vars.put(&quot;MemberKeysCounter_DEBUG&quot;, ids.length);  	// вывод в дебаггер</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="TestPlan.comments">Getting  Member screening ids</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting list of screenings for the selected event" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${screeningpath}/Screenings/Event/${CurrentEventID}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">Список скринингов для текущего ивента</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="BSF PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var EventIDs = vars.getObject(&quot;EventIDs&quot;),
    Step = vars.get(&quot;Step&quot;),
    CurrentEventID = EventIDs[Step]; 	// создаем переменную в памяти Jmeter
    
vars.put(&quot;CurrentEventID&quot;, CurrentEventID); 		//инициализируем переменную в памяти JS  то же самое если... /*vars.put(&quot;FormID&quot;, ScreeningIds[Step]);*/
</stringProp>
            </BSFPreProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EventScreenings MemberID: ${CurrentMemberKey}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${memberpath}/EventScreenings/Staff/Member/${CurrentMemberKey}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">Список скринингов для каждого  мембера</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="BSF PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var MemberKeys = vars.getObject(&quot;MemberKeys&quot;),
    Step = vars.get(&quot;Step&quot;),
    CurrentMemberKey = MemberKeys[Step]; 	// создаем переменную в памяти Jmeter
    
vars.put(&quot;CurrentMemberKey&quot;, CurrentMemberKey); 		//инициализируем переменную в памяти JS  то же самое если... /*vars.put(&quot;FormID&quot;, ScreeningIds[Step]);*/
</stringProp>
            </BSFPreProcessor>
            <hashTree/>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);


var ids = []; 								  	//создаем массив
for(var i in objects) {						  	// i - ключ массива, перебираем все значения по порядку
	ids.push(objects[i].MemberScreeningID);		  	//Помещаем переменную в массив
}


vars.put(&quot;ScreeningIds_DEBUG&quot;, JSON.stringify(ids));
vars.putObject(&quot;ScreeningIds&quot;, ids);


vars.put(&quot;ScreeningsCounter&quot;, ids.length);        	// длина массива    
vars.put(&quot;ScreeningsCounter_DEBUG&quot;, ids.length);  	// вывод в дебаггер</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="TestPlan.comments">Getting  Member screening ids</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler before" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="BSF Sampler" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var StepScreening = 0;
vars.put(&quot;StepScreening&quot;, StepScreening); </stringProp>
          </BSFSampler>
          <hashTree/>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Load all available screenings forms" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${ScreeningsCounter}</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Screening Load form using ID ${FormID}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/LoadForm/${FormID}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="BSF PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var ScreeningIds = vars.getObject(&quot;ScreeningIds&quot;),
    StepScreening = vars.get(&quot;StepScreening&quot;),
    Step = StepScreening,
    FormID = ScreeningIds[Step]; 	// создаем переменную в памяти Jmeter

vars.put(&quot;FormID&quot;, FormID); 		//инициализируем переменную в памяти JS  то же самое если... /*vars.put(&quot;FormID&quot;, ScreeningIds[Step]);*/

StepScreening++;
vars.put(&quot;StepScreening&quot;, StepScreening); 
</stringProp>
              </BSFPreProcessor>
              <hashTree/>
              <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">var FormIDCheck = vars.get(&quot;FormID&quot;); 

if(FormIDCheck == null) {
	prev.setSuccessful(true);     
     prev.setResponseMessage(&quot;THIS SCREENING IS UNAVAILABLE FOR THE SELECTED MEMBER&quot;);
}
else {
	prev.setResponseMessage(&quot;SCREENING FORM IS LOADED SUCCESSFULLY&quot;);
     }</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </BSFPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Load all available screenings forms" enabled="false">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${ScreeningsCounter}</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="false">
              <stringProp name="CounterConfig.start">0</stringProp>
              <stringProp name="CounterConfig.end"></stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">StepS</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Screening Load form using ID" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/LoadForm/${FormID}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="BSF PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var ScreeningIds = vars.getObject(&quot;ScreeningIds&quot;),
    StepScreening = vars.get(&quot;StepScreening&quot;),
    Step = StepScreening,
    FormID = ScreeningIds[Step]; 	// создаем переменную в памяти Jmeter

vars.put(&quot;FormID&quot;, FormID); 		//инициализируем переменную в памяти JS  то же самое если... /*vars.put(&quot;FormID&quot;, ScreeningIds[Step]);*/

StepScreening++;
vars.put(&quot;StepScreening&quot;, StepScreening); 
</stringProp>
              </BSFPreProcessor>
              <hashTree/>
              <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;FirstName&quot;, serializedJSONBody.FirstName);

prev.setSuccessful(${MemberFirstName}==${FirstName});

</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </BSFPostProcessor>
              <hashTree/>
            </hashTree>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Screenings - Random Event - Random member - Load screening form" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1413965583000</longProp>
        <longProp name="ThreadGroup.end_time">1413965583000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${Login}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Getting authorization key for the next steps</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">0</stringProp>
            <stringProp name="RandomTimer.range">1000.0</stringProp>
          </UniformRandomTimer>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;sessionKey&quot;, serializedJSONBody.SessionKey);
vars.put(&quot;StaffID&quot;, serializedJSONBody.StaffID);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-670529065">Invalid</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting All open events" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="StaffID" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">StaffID</stringProp>
                <stringProp name="Argument.value">${StaffID}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/Events/Allopenevents/Staff</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">0</stringProp>
            <stringProp name="RandomTimer.range">1000.0</stringProp>
          </UniformRandomTimer>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);


var ids = []; 								  	//создаем массив
for(var i in objects) {						  	// i - ключ массива, перебираем все значения по порядку
	ids.push(objects[i].EventID);		  	//Помещаем переменную в массив
}


vars.put(&quot;EventIDs_DEBUG&quot;, JSON.stringify(ids));
vars.putObject(&quot;EventIDs&quot;, ids);


vars.put(&quot;EventIDCounter&quot;, ids.length);        	// длина массива    
vars.put(&quot;EventIDCounter_DEBUG&quot;, ids.length);  	// вывод в дебаггер</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Getting  Member screening ids</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting List of CheckedIn Members Random EventID" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">${memberpath}/CheckedInMembers/Event/${RandomEventID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Список зачекиненых мемберов для каждого ивента</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">0</stringProp>
            <stringProp name="RandomTimer.range">1000.0</stringProp>
          </UniformRandomTimer>
          <hashTree/>
          <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="BSF PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var AllEventIDs = vars.getObject(&quot;EventIDs&quot;),
    randomElement = Math.floor(Math.random() * AllEventIDs.length);
    
vars.put(&quot;RandomEventID&quot;, AllEventIDs[randomElement]);</stringProp>
          </BSFPreProcessor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">prev.setSuccessful(false);
prev.setResponseMessage(&quot;SOMETHING GOES WRONG&quot;); // Иначе, видим сообщение, о том, что все OK)

eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);

if(objects.length == 0) {
	prev.setSuccessful(true);      // Если значения не совпадают, то запрос не фейлится
     prev.setResponseMessage(&quot;THERE IS NO ASSIGNED MEMBERS FOR THIS EVENT&quot;); // Иначе, видим сообщение, о том, что все OK)
}
else {
	var ids = []; 								  	//создаем массив
	for(var i in objects) {						  	// i - ключ массива, перебираем все значения по порядку
		ids.push(objects[i].MemberKey);		  	//Помещаем переменную в массив
	}
	
	vars.put(&quot;MemberKeys_DEBUG&quot;, JSON.stringify(ids));
	vars.putObject(&quot;MemberKeys&quot;, ids);
	
	
	vars.put(&quot;MemberKeysCounter&quot;, ids.length);        	// длина массива    
	vars.put(&quot;MemberKeysCounter_DEBUG&quot;, ids.length);  	// вывод в дебаггер
	
	prev.setSuccessful(true);      // Если значения не совпадают, то запрос не фейлится
     prev.setResponseMessage(&quot;ASSIGNED MEMBERS WERE FOUND&quot;); // Иначе, видим сообщение, о том, что все OK)
}</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Getting  Member screening ids</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting list of screenings for the selected event" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${screeningpath}/Screenings/Event/${RandomEventID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Список скринингов для текущего ивента</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="BSF PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var AllEventIDs = vars.getObject(&quot;EventIDs&quot;),
    randomElement = Math.floor(Math.random() * AllEventIDs.length);
    
vars.put(&quot;RandomEventID&quot;, AllEventIDs[randomElement]);</stringProp>
          </BSFPreProcessor>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler before" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="TestPlan.comments">Выполнять данный запрос если переменная не равна нулю</stringProp>
          <stringProp name="IfController.condition">${MemberKeysCounter} !=&apos;0&apos;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EventScreenings MemberID: ${RandomMemberKey}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${memberpath}/EventScreenings/Staff/Member/${RandomMemberKey}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">Список скринингов для каждого  мембера</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="BSF PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var AllMemberKeys = vars.getObject(&quot;MemberKeys&quot;),
    randomElement = Math.floor(Math.random() * AllMemberKeys.length);
    
vars.put(&quot;RandomMemberKey&quot;, AllMemberKeys[randomElement]);</stringProp>
            </BSFPreProcessor>
            <hashTree/>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);


var ids = []; 								  	//создаем массив
for(var i in objects) {						  	// i - ключ массива, перебираем все значения по порядку
	if(objects[i].MemberScreeningID != null) {
		ids.push(objects[i].MemberScreeningID);		  	//Помещаем переменную в массив
	}
	
}

vars.put(&quot;DEBUG_ScreeningIDs&quot;, JSON.stringify(ids));
vars.putObject(&quot;ScreeningIDs&quot;, ids);

vars.put(&quot;MemberScreeningIDs&quot;, ids.length);</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="TestPlan.comments">Getting  Member screening ids</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="StepScreening (Counter)" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var Step = 0;
vars.put(&quot;StepScreening&quot;, Step); </stringProp>
          </BSFSampler>
          <hashTree/>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Load all available screenings forms" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${MemberScreeningIDs}</stringProp>
          </LoopController>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">0</stringProp>
              <stringProp name="RandomTimer.range">3000.0</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Screening Load form using ID ${FormID}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/LoadForm/${FormID}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var FormIDCheck = vars.get(&quot;FormID&quot;); 

if(FormIDCheck == null) {
	prev.setSuccessful(true);     
     prev.setResponseMessage(&quot;THIS SCREENING IS UNAVAILABLE&quot;);
}
else {
	prev.setResponseMessage(&quot;SCREENING FORM IS LOADED SUCCESSFULLY&quot;);
     }</stringProp>
              </BSFPostProcessor>
              <hashTree/>
              <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="BSF PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var AllScreeningIDs = vars.getObject(&quot;ScreeningIDs&quot;),
    Step = vars.get(&quot;StepScreening&quot;),
    FormID = AllScreeningIDs[Step]; 	// создаем переменную в памяти Jmeter

vars.put(&quot;FormID&quot;, FormID); 		//инициализируем переменную в памяти JS  то же самое если... /*vars.put(&quot;FormID&quot;, ScreeningIds[Step]);*/

Step++;
vars.put(&quot;StepScreening&quot;, Step);
</stringProp>
              </BSFPreProcessor>
              <hashTree/>
            </hashTree>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Screenings. Load form. Validation rules checking" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1413965583000</longProp>
        <longProp name="ThreadGroup.end_time">1413965583000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LOGIN" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${Login}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Getting authorization key for the next steps</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;sessionKey&quot;, serializedJSONBody.SessionKey);
vars.put(&quot;StaffID&quot;, serializedJSONBody.StaffID);
vars.put(&quot;UserLoginCheck&quot;, serializedJSONBody.Username);
</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="UsernameCheck" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2086632421">Eugene</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">UserLoginCheck</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response status check" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CHOLESTEROL" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CHOLESTEROL Range validation checking" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/LoadForm/15473</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Total Cholesterol mg/dl Range validation checking" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);
var CholesterolMinimum = objects[0].ScreeningItems[1].RangeValidation.Minimum;
var CholesterolMaximum = objects[0].ScreeningItems[1].RangeValidation.Maximum;
var RangeValidationMessage = objects[0].ScreeningItems[1].RangeValidation.ErrorMessage;
var RangeValidationDescription = objects[0].ScreeningItems[1].RangeValidation.Description;

vars.put(&quot;DEBUG_CholesterolMinimum&quot;, JSON.stringify(CholesterolMinimum));
vars.put(&quot;DEBUG_CholesterolMaximum&quot;, JSON.stringify(CholesterolMaximum));
vars.put(&quot;DEBUG_RangeValidationMessage&quot;, JSON.stringify(RangeValidationMessage));
vars.put(&quot;DEBUG_RangeValidationDescription&quot;, JSON.stringify(RangeValidationDescription));

if (CholesterolMinimum == 0 &amp;&amp; CholesterolMaximum == 999 &amp;&amp; RangeValidationMessage == &quot;Please enter a valid 3 digit number for Cholesterol.&quot;) {
	prev.setSuccessful(true); 
     prev.setResponseMessage(&quot;Minimum: &quot;+CholesterolMinimum + &quot; Maximum: &quot;+ CholesterolMaximum +&quot; &quot;+ &quot; Message: &quot;+RangeValidationMessage);
     }
else {
	prev.setSuccessful(false);
     prev.setResponseMessage(&quot;Something goes wrong. Recieved an unexpected value&quot;);
}

</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="TestPlan.comments">Getting  Member screening ids</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CHOLESTEROL Total Cholesterol mg/dl Critical Ranges checking" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/LoadForm/15473</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Total Cholesterol mg/dl Critical Ranges checking" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);
var CholesterolCriticalRangeMin = objects[0].ScreeningItems[1].CriticalReferenceRange[0].RangeMin;
var CholesterolCriticalRangeMax = objects[0].ScreeningItems[1].CriticalReferenceRange[0].RangeMax;
var CholesterolMessage = objects[0].ScreeningItems[1].CriticalReferenceRange[0].Message;
var CholesterolDescription = objects[0].ScreeningItems[1].CriticalReferenceRange[0].Description;

vars.put(&quot;DEBUG_CholesterolCriticalRangeMin&quot;, JSON.stringify(CholesterolCriticalRangeMin));
vars.put(&quot;DEBUG_CholesterolCriticalRangeMax&quot;, JSON.stringify(CholesterolCriticalRangeMax));
vars.put(&quot;DEBUG_CholesterolMessage&quot;, JSON.stringify(CholesterolMessage));
vars.put(&quot;DEBUG_CholesterolDescription&quot;, JSON.stringify(CholesterolDescription));


if (CholesterolCriticalRangeMin == 401 &amp;&amp; CholesterolCriticalRangeMax == 1000 &amp;&amp; CholesterolDescription == &quot;Reference Range for Critical Cholesterol&quot; ) {
	prev.setSuccessful(true);     
     prev.setResponseMessage(&quot;CriticalRangeMin: &quot;+CholesterolCriticalRangeMin+&quot; CriticalRangeMax: &quot; + CholesterolCriticalRangeMax + &quot; Message: &quot;+CholesterolMessage);
     }
else {
	prev.setSuccessful(false); 
     prev.setResponseMessage(&quot;Something goes wrong. Recieved an unexpected value&quot;
);
}

// Expected values for this case: 
// CholesterolCriticalRangeMin = 401; CholesterolCriticalRangeMax = 1000; 
// CholesterolDescription = &quot;Reference Range for Critical Cholesterol&quot;</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="TestPlan.comments">Getting  Member screening ids</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CHOLESTEROL HDL Critical Ranges checking" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/LoadForm/15473</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="HDL Critical Ranges checking" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);
var HDLCriticalRangeMin = objects[0].ScreeningItems[2].CriticalReferenceRange[0].RangeMin;
var HDLCriticalRangeMax = objects[0].ScreeningItems[2].CriticalReferenceRange[0].RangeMax;
var HDLMessage = objects[0].ScreeningItems[2].CriticalReferenceRange[0].Message;
var HDLDescription = objects[0].ScreeningItems[2].CriticalReferenceRange[0].Description;

vars.put(&quot;DEBUG_HDLCriticalRangeMin&quot;, JSON.stringify(HDLCriticalRangeMin));
vars.put(&quot;DEBUG_HDLCriticalRangeMax&quot;, JSON.stringify(HDLCriticalRangeMax));
vars.put(&quot;DEBUG_HDLMessage&quot;, JSON.stringify(HDLMessage));
vars.put(&quot;DEBUG_HDLDescription&quot;, JSON.stringify(HDLDescription));


if (HDLCriticalRangeMin == 0 &amp;&amp; HDLCriticalRangeMax == 29 &amp;&amp; HDLDescription == &quot;Reference Range for Critical HDL - Women&quot; ) {
	prev.setSuccessful(true);     
     prev.setResponseMessage(&quot;CriticalRangeMin: &quot;+HDLCriticalRangeMin+&quot; CriticalRangeMax: &quot; + HDLCriticalRangeMax + &quot; Message: &quot;+HDLMessage);
     }
else {
	prev.setSuccessful(false); 
     prev.setResponseMessage(&quot;Something goes wrong. Recieved an unexpected value&quot;
);
}
</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CHOLESTEROL Triglycerides Critical Ranges checking" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/LoadForm/15473</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Triglycerides Critical Ranges checking" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);
var TriglyceridesCriticalRangeMin = objects[0].ScreeningItems[3].CriticalReferenceRange[0].RangeMin;
var TriglyceridesCriticalRangeMax = objects[0].ScreeningItems[3].CriticalReferenceRange[0].RangeMax;
var TriglyceridesMessage = objects[0].ScreeningItems[3].CriticalReferenceRange[0].Message;
var TriglyceridesDescription = objects[0].ScreeningItems[3].CriticalReferenceRange[0].Description;

vars.put(&quot;DEBUG_TriglyceridesCriticalRangeMin&quot;, JSON.stringify(TriglyceridesCriticalRangeMin));
vars.put(&quot;DEBUG_TriglyceridesCriticalRangeMax&quot;, JSON.stringify(TriglyceridesCriticalRangeMax));
vars.put(&quot;DEBUG_TriglyceridesMessage&quot;, JSON.stringify(TriglyceridesMessage));
vars.put(&quot;DEBUG_TriglyceridesDescription&quot;, JSON.stringify(TriglyceridesDescription));


if (TriglyceridesCriticalRangeMin == 00 &amp;&amp; TriglyceridesCriticalRangeMax == 45 &amp;&amp; TriglyceridesDescription == &quot;Reference Range for Low Triglycerides&quot;) {
	prev.setSuccessful(true);     
     prev.setResponseMessage(&quot;CriticalRangeMin: &quot;+TriglyceridesCriticalRangeMin+&quot; CriticalRangeMax: &quot; + TriglyceridesCriticalRangeMax + &quot; Message: &quot;+TriglyceridesMessage);
     }
else {
	prev.setSuccessful(false); 
     prev.setResponseMessage(&quot;Something goes wrong. Recieved an unexpected value&quot;
);
}
</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CHOLESTEROL LDL Critical Ranges checking" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/LoadForm/15473</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="LDL Critical Ranges checking" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);
var LDLCriticalRangeMin = objects[0].ScreeningItems[4].CriticalReferenceRange[0].RangeMin;
var LDLCriticalRangeMax = objects[0].ScreeningItems[4].CriticalReferenceRange[0].RangeMax;
var LDLMessage = objects[0].ScreeningItems[4].CriticalReferenceRange[0].Message;
var LDLDescription = objects[0].ScreeningItems[4].CriticalReferenceRange[0].Description;

vars.put(&quot;DEBUG_LDLCriticalRangeMin&quot;, JSON.stringify(LDLCriticalRangeMin));
vars.put(&quot;DEBUG_LDLCriticalRangeMax&quot;, JSON.stringify(LDLCriticalRangeMax));
vars.put(&quot;DEBUG_LDLMessage&quot;, JSON.stringify(LDLMessage));
vars.put(&quot;DEBUG_LDLDescription&quot;, JSON.stringify(LDLDescription));


if (LDLCriticalRangeMin == 190 &amp;&amp; LDLCriticalRangeMax == 1000 &amp;&amp; LDLDescription == &quot;Reference Range for Critical LDL&quot;) {
	prev.setSuccessful(true);     
     prev.setResponseMessage(&quot;CriticalRangeMin: &quot;+LDLCriticalRangeMin+&quot; CriticalRangeMax: &quot; + LDLCriticalRangeMax + &quot; Message: &quot;+LDLMessage);
     }
else {
	prev.setSuccessful(false); 
     prev.setResponseMessage(&quot;Something goes wrong. Recieved an unexpected value&quot;);
}
</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CHOLESTEROL Triglycerides Critical Ranges checking" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/LoadForm/15473</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Triglycerides Critical Ranges checking" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);
var TCHDLCriticalRangeMin = objects[0].ScreeningItems[5].CriticalReferenceRange[0].RangeMin;
var TCHDLCriticalRangeMax = objects[0].ScreeningItems[5].CriticalReferenceRange[0].RangeMax;
var TCHDLMessage = objects[0].ScreeningItems[5].CriticalReferenceRange[0].Message;
var TCHDLDescription = objects[0].ScreeningItems[5].CriticalReferenceRange[0].Description;

vars.put(&quot;DEBUG_TCHDLCriticalRangeMin&quot;, JSON.stringify(TCHDLCriticalRangeMin));
vars.put(&quot;DEBUG_TCHDLCriticalRangeMax&quot;, JSON.stringify(TCHDLCriticalRangeMax));
vars.put(&quot;DEBUG_TCHDLMessage&quot;, JSON.stringify(TCHDLMessage));
vars.put(&quot;DEBUG_TCHDLDescription&quot;, JSON.stringify(TCHDLDescription));


if (TCHDLCriticalRangeMin == 4.5 &amp;&amp; TCHDLCriticalRangeMax == 100.00 &amp;&amp; TCHDLDescription == &quot;Reference Range for Critical TC/HDL&quot;) {
	prev.setSuccessful(true);     
     prev.setResponseMessage(&quot;CriticalRangeMin: &quot;+TCHDLCriticalRangeMin+&quot; CriticalRangeMax: &quot; + TCHDLCriticalRangeMax + &quot; Message: &quot;+TCHDLMessage);
     }
else {
	prev.setSuccessful(false); 
     prev.setResponseMessage(&quot;Something goes wrong. Recieved an unexpected value&quot;
);
}
</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="EXPECTED RESULTS" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EXPECTED RESULTS" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/LoadForm/15474</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Expected results Range validation checking" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);
var ExpectedResultsMinimum = objects[0].ScreeningItems[0].RangeValidation.Minimum;
var ExpectedResultsMaximum = objects[0].ScreeningItems[0].RangeValidation.Maximum;
var RangeValidationMessage = objects[0].ScreeningItems[0].RangeValidation.ErrorMessage;
var RangeValidationDescription = objects[0].ScreeningItems[0].RangeValidation.Description;

vars.put(&quot;DEBUG_ExpectedResultsMinimum&quot;, JSON.stringify(ExpectedResultsMinimum));
vars.put(&quot;DEBUG_ExpectedResultsMaximum&quot;, JSON.stringify(ExpectedResultsMaximum));
vars.put(&quot;DEBUG_RangeValidationMessage&quot;, JSON.stringify(RangeValidationMessage));
vars.put(&quot;DEBUG_RangeValidationDescription&quot;, JSON.stringify(RangeValidationDescription));

if (ExpectedResultsMinimum == 1 &amp;&amp; ExpectedResultsMaximum == 2 &amp;&amp; RangeValidationMessage == &quot;Please select Expected Results.&quot;) {
	prev.setSuccessful(true); 
     prev.setResponseMessage(&quot;Minimum: &quot;+ExpectedResultsMinimum + &quot; Maximum: &quot;+ ExpectedResultsMaximum +&quot; &quot;+ &quot; Message: &quot;+RangeValidationMessage);
     }
else {
	prev.setSuccessful(false);
     prev.setResponseMessage(&quot;Something goes wrong. Recieved an unexpected value&quot;);
}</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GLUCOSE" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GLUCOSE - Fasting (MG/DL)" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/LoadForm/15300</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Glucose fasting mg/dl Critical Ranges checking" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);
var GlucoseCriticalRangeMin = objects[0].ScreeningItems[1].CriticalReferenceRange[0].RangeMin;
var GlucoseCriticalRangeMax = objects[0].ScreeningItems[1].CriticalReferenceRange[0].RangeMax;
var GlucoseMessage = objects[0].ScreeningItems[1].CriticalReferenceRange[0].Message;
var GlucoseDescription = objects[0].ScreeningItems[1].CriticalReferenceRange[0].Description;

vars.put(&quot;DEBUG_GlucoseCriticalRangeMin&quot;, JSON.stringify(GlucoseCriticalRangeMin));
vars.put(&quot;DEBUG_GlucoseCriticalRangeMax&quot;, JSON.stringify(GlucoseCriticalRangeMax));
vars.put(&quot;DEBUG_GlucoseMessage&quot;, JSON.stringify(GlucoseMessage));
vars.put(&quot;DEBUG_GlucoseDescription&quot;, JSON.stringify(GlucoseDescription));


if (GlucoseCriticalRangeMin == 126 &amp;&amp; GlucoseCriticalRangeMax == 999 &amp;&amp; GlucoseDescription == &quot;Reference Range for Critical Glucose Fasting&quot; ) {
	prev.setSuccessful(true);     
     prev.setResponseMessage(&quot;CriticalRangeMin: &quot;+GlucoseCriticalRangeMin+&quot; CriticalRangeMax: &quot; + GlucoseCriticalRangeMax + &quot; Message: &quot;+GlucoseMessage);
     }
else {
	prev.setSuccessful(false); 
     prev.setResponseMessage(&quot;Something goes wrong. Recieved an unexpected value&quot;
);
}

// Expected values for this case: 
// CholesterolCriticalRangeMin = 126; CholesterolCriticalRangeMax = 999; 
// CholesterolDescription = &quot;Reference Range for Critical Cholesterol&quot;</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="TestPlan.comments">Getting  Member screening ids</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GLUCOSE - NonFasting (MG/DL)" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/LoadForm/15300</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Glucose fasting mg/dl Critical Ranges checking" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);
var GlucoseNonFastingCriticalRangeMin = objects[1].ScreeningItems[1].CriticalReferenceRange[0].RangeMin;
var GlucoseNonFastingCriticalRangeMax = objects[1].ScreeningItems[1].CriticalReferenceRange[0].RangeMax;
var GlucoseNonFastingMessage = objects[1].ScreeningItems[1].CriticalReferenceRange[0].Message;
var GlucoseNonFastingDescription = objects[1].ScreeningItems[1].CriticalReferenceRange[0].Description;

vars.put(&quot;DEBUG_GlucoseNonFastingCriticalRangeMin&quot;, JSON.stringify(GlucoseNonFastingCriticalRangeMin));
vars.put(&quot;DEBUG_GlucoseNonFastingCriticalRangeMax&quot;, JSON.stringify(GlucoseNonFastingCriticalRangeMax));
vars.put(&quot;DEBUG_GlucoseNonFastingMessage&quot;, JSON.stringify(GlucoseNonFastingMessage));
vars.put(&quot;DEBUG_GlucoseNonFastingDescription&quot;, JSON.stringify(GlucoseNonFastingDescription));


if (GlucoseNonFastingCriticalRangeMin == 200 &amp;&amp; GlucoseNonFastingCriticalRangeMax == 999 &amp;&amp; GlucoseNonFastingDescription == &quot;Reference Range for Critical Glucose Non-Fasting&quot;) {
	prev.setSuccessful(true);     
     prev.setResponseMessage(&quot;CriticalRangeMin: &quot;+GlucoseNonFastingCriticalRangeMin+&quot; CriticalRangeMax: &quot; + GlucoseNonFastingCriticalRangeMax + &quot; Message: &quot;+GlucoseNonFastingMessage);
     }
else {
	prev.setSuccessful(false); 
     prev.setResponseMessage(&quot;Something goes wrong. Recieved an unexpected value&quot;
);
}

// Expected values for this case: 
// CholesterolCriticalRangeMin = 126; CholesterolCriticalRangeMax = 999; 
// CholesterolDescription = &quot;Reference Range for Critical Cholesterol&quot;</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="TestPlan.comments">Getting  Member screening ids</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="HEMOGLOBIN" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HEMOGLOBIN" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/LoadForm/15306</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Hemoglobin Critical Ranges checking" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);
var HemoglobinCriticalRangeMin = objects[0].ScreeningItems[1].CriticalReferenceRange[0].RangeMin;
var HemoglobinCriticalRangeMax = objects[0].ScreeningItems[1].CriticalReferenceRange[0].RangeMax;
var HemoglobinMessage = objects[0].ScreeningItems[1].CriticalReferenceRange[0].Message;
var HemoglobinDescription = objects[0].ScreeningItems[1].CriticalReferenceRange[0].Description;

vars.put(&quot;DEBUG_HemoglobinCriticalRangeMin&quot;, JSON.stringify(HemoglobinCriticalRangeMin));
vars.put(&quot;DEBUG_HemoglobinCriticalRangeMax&quot;, JSON.stringify(HemoglobinCriticalRangeMax));
vars.put(&quot;DEBUG_HemoglobinMessage&quot;, JSON.stringify(HemoglobinMessage));
vars.put(&quot;DEBUG_HemoglobinDescription&quot;, JSON.stringify(HemoglobinDescription));


if (HemoglobinCriticalRangeMin == 7.0 &amp;&amp; HemoglobinCriticalRangeMax == 100.00 &amp;&amp; HemoglobinDescription == &quot;Reference Range for Critical HBA1C&quot;) {
	prev.setSuccessful(true);     
     prev.setResponseMessage(&quot;CriticalRangeMin: &quot;+HemoglobinCriticalRangeMin+&quot; CriticalRangeMax: &quot; + HemoglobinCriticalRangeMax + &quot; Message: &quot;+HemoglobinMessage);
     }
else {
	prev.setSuccessful(false); 
     prev.setResponseMessage(&quot;Something goes wrong. Recieved an unexpected value&quot;
);
}

// Expected values for this case: 
// CholesterolCriticalRangeMin = 126; CholesterolCriticalRangeMax = 999; 
// CholesterolDescription = &quot;Reference Range for Critical Cholesterol&quot;</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="TestPlan.comments">Getting  Member screening ids</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="NEPHROPATHY" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="NEPHROPATHY" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/LoadForm/15305</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="Nephropathy Critical Ranges checking" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);
var NephropathyCriticalRangeMin = objects[0].ScreeningItems[1].CriticalReferenceRange[0].RangeMin;
var NephropathyCriticalRangeMax = objects[0].ScreeningItems[1].CriticalReferenceRange[0].RangeMax;
var NephropathyMessage = objects[0].ScreeningItems[1].CriticalReferenceRange[0].Message;
var NephropathyDescription = objects[0].ScreeningItems[1].CriticalReferenceRange[0].Description;

vars.put(&quot;DEBUG_NephropathyCriticalRangeMin&quot;, JSON.stringify(NephropathyCriticalRangeMin));
vars.put(&quot;DEBUG_NephropathyCriticalRangeMax&quot;, JSON.stringify(NephropathyCriticalRangeMax));
vars.put(&quot;DEBUG_NephropathyMessage&quot;, JSON.stringify(NephropathyMessage));
vars.put(&quot;DEBUG_NephropathyDescription&quot;, JSON.stringify(NephropathyDescription));


if (NephropathyCriticalRangeMin == 300 &amp;&amp; NephropathyCriticalRangeMax == 1000 &amp;&amp; NephropathyDescription == &quot;Reference Range for Critical Nephropathy&quot;) {
	prev.setSuccessful(true);     
     prev.setResponseMessage(&quot;CriticalRangeMin: &quot;+NephropathyCriticalRangeMin+&quot; CriticalRangeMax: &quot; + NephropathyCriticalRangeMax + &quot; Message: &quot;+NephropathyMessage);
     }
else {
	prev.setSuccessful(false); 
     prev.setResponseMessage(&quot;Something goes wrong. Recieved an unexpected value&quot;
);
}

// Expected values for this case: 
// CholesterolCriticalRangeMin = 126; CholesterolCriticalRangeMax = 999; 
// CholesterolDescription = &quot;Reference Range for Critical Cholesterol&quot;</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="TestPlan.comments">Getting  Member screening ids</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="BODY MASS INDEX" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BMI Critical High and Low Height  Ranges checking" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/LoadForm/15304</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BMI Critical High and Low Height  Ranges checking" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);
// Critical low values
var HeightLowCriticalRangeMin = objects[0].ScreeningItems[2].CriticalReferenceRange[0].RangeMin;
var HeightLowCriticalRangeMax = objects[0].ScreeningItems[2].CriticalReferenceRange[0].RangeMax;
var HeightLowMessage = objects[0].ScreeningItems[2].CriticalReferenceRange[0].Message;
var HeightLowDescription = objects[0].ScreeningItems[2].CriticalReferenceRange[0].Description;
// Critical High values
var HeightHighCriticalRangeMin = objects[0].ScreeningItems[2].CriticalReferenceRange[1].RangeMin;
var HeightHighCriticalRangeMax = objects[0].ScreeningItems[2].CriticalReferenceRange[1].RangeMax;
var HeightHighMessage = objects[0].ScreeningItems[2].CriticalReferenceRange[1].Message;
var HeightHighDescription = objects[0].ScreeningItems[2].CriticalReferenceRange[1].Description;
//Show Critical low values
vars.put(&quot;DEBUG_HeightLowCriticalRangeMin&quot;, JSON.stringify(HeightLowCriticalRangeMin));
vars.put(&quot;DEBUG_HeightLowCriticalRangeMax&quot;, JSON.stringify(HeightLowCriticalRangeMax));
vars.put(&quot;DEBUG_HeightLowMessage&quot;, JSON.stringify(HeightLowMessage));
vars.put(&quot;DEBUG_HeightLowDescription&quot;, JSON.stringify(HeightLowDescription));
//Show Critical High values
vars.put(&quot;DEBUG_HeightHighCriticalRangeMin&quot;, JSON.stringify(HeightLowCriticalRangeMin));
vars.put(&quot;DEBUG_HeightHighCriticalRangeMax&quot;, JSON.stringify(HeightLowCriticalRangeMax));
vars.put(&quot;DEBUG_HeightHighMessage&quot;, JSON.stringify(HeightLowMessage));
vars.put(&quot;DEBUG_HeightHighDescription&quot;, JSON.stringify(HeightLowDescription));


if (HeightLowCriticalRangeMin == 0.0 &amp;&amp; HeightLowCriticalRangeMax == 60.0 &amp;&amp; HeightLowDescription == &quot;Reference Range for Height - Low&quot; &amp;&amp; HeightHighCriticalRangeMin == 77.0 &amp;&amp; HeightHighCriticalRangeMax == 100.00 &amp;&amp; HeightHighDescription == &quot;Reference Range for Height - High&quot;) {
	prev.setSuccessful(true);     
     prev.setResponseMessage(&quot;CriticalLowRangeMin: &quot;+HeightLowCriticalRangeMin+&quot; CriticalLowRangeMax: &quot; + HeightLowCriticalRangeMax + &quot; Message: &quot;+HeightLowMessage +&quot; CriticalHighRangeMin: &quot;+HeightHighCriticalRangeMin+&quot; CriticalHighRangeMax: &quot; + HeightHighCriticalRangeMax + &quot; Message: &quot;+HeightHighMessage);
     }
else {
	prev.setSuccessful(false); 
     prev.setResponseMessage(&quot;Something goes wrong. Recieved an unexpected value&quot;);
     }

</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="TestPlan.comments">Getting  Member screening ids</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BMI Critical High and Low Weight  Ranges checking" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/LoadForm/15304</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BMI Critical High and Low Weight  Ranges checking" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);
// Critical low values
var WeightLowCriticalRangeMin = objects[0].ScreeningItems[1].CriticalReferenceRange[0].RangeMin;
var WeightLowCriticalRangeMax = objects[0].ScreeningItems[1].CriticalReferenceRange[0].RangeMax;
var WeightLowMessage = objects[0].ScreeningItems[1].CriticalReferenceRange[0].Message;
var WeightLowDescription = objects[0].ScreeningItems[1].CriticalReferenceRange[0].Description;
// Critical High values
var WeightHighCriticalRangeMin = objects[0].ScreeningItems[1].CriticalReferenceRange[1].RangeMin;
var WeightHighCriticalRangeMax = objects[0].ScreeningItems[1].CriticalReferenceRange[1].RangeMax;
var WeightHighMessage = objects[0].ScreeningItems[1].CriticalReferenceRange[1].Message;
var WeightHighDescription = objects[0].ScreeningItems[1].CriticalReferenceRange[1].Description;
//Show Critical low values
vars.put(&quot;DEBUG_WeightHighCriticalRangeMin&quot;, JSON.stringify(WeightHighCriticalRangeMin));
vars.put(&quot;DEBUG_WeightHighCriticalRangeMax&quot;, JSON.stringify(WeightHighCriticalRangeMax));
vars.put(&quot;DEBUG_WeightHighMessage&quot;, JSON.stringify(WeightHighMessage));
vars.put(&quot;DEBUG_WeightHighDescription&quot;, JSON.stringify(WeightHighDescription));
//Show Critical High values
vars.put(&quot;DEBUG_WeightLowCriticalRangeMin&quot;, JSON.stringify(WeightLowCriticalRangeMin));
vars.put(&quot;DEBUG_WeightLowCriticalRangeMax&quot;, JSON.stringify(WeightLowCriticalRangeMax));
vars.put(&quot;DEBUG_WeightLowMessage&quot;, JSON.stringify(WeightLowMessage));
vars.put(&quot;DEBUG_WeightLowDescription&quot;, JSON.stringify(WeightLowDescription));


if (WeightLowCriticalRangeMin == 0.0 &amp;&amp; WeightLowCriticalRangeMax == 99.0 &amp;&amp; WeightLowDescription == &quot;Reference Range for Weight - Low&quot; &amp;&amp; WeightHighCriticalRangeMin == 350.0 &amp;&amp; WeightHighCriticalRangeMax == 1000.00 &amp;&amp; WeightHighDescription == &quot;Reference Range for Weight - High&quot;) {
	prev.setSuccessful(true);     
     prev.setResponseMessage(&quot;CriticalLowRangeMin: &quot;+WeightLowCriticalRangeMin+&quot; CriticalLowRangeMax: &quot; + WeightLowCriticalRangeMax + &quot; Message: &quot;+WeightLowMessage +&quot; CriticalHighRangeMin: &quot;+WeightHighCriticalRangeMin+&quot; CriticalHighRangeMax: &quot; + WeightHighCriticalRangeMax + &quot; Message: &quot;+WeightHighMessage);
     }
else {
	prev.setSuccessful(false); 
     prev.setResponseMessage(&quot;Something goes wrong. Recieved an unexpected value&quot;);
     }

</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="BLOOD PRESSURE" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BLOOD PRESSURE Range Validation" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/LoadForm/15303</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BLOOD PRESSURE Range Validation" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);
// Range validation
var SystolicRangeValidationMin = objects[0].ScreeningItems[1].RangeValidation.Minimum;
var SystolicRangeValidationMax = objects[0].ScreeningItems[1].RangeValidation.Maximum;
var DiastolicRangeValidationMin = objects[0].ScreeningItems[2].RangeValidation.Minimum;
var DiastolicRangeValidationMax = objects[0].ScreeningItems[2].RangeValidation.Maximum;
var SystolicErrorMessage = objects[0].ScreeningItems[1].RangeValidation.ErrorMessage;
var DiastolicErrorMessage = objects[0].ScreeningItems[2].RangeValidation.ErrorMessage;
//Show values
vars.put(&quot;DEBUG_SystolicRangeValidationMin&quot;, JSON.stringify(SystolicRangeValidationMin));
vars.put(&quot;DEBUG_SystolicRangeValidationMax&quot;, JSON.stringify(SystolicRangeValidationMax));
vars.put(&quot;DEBUG_DiastolicRangeValidationMin&quot;, JSON.stringify(DiastolicRangeValidationMin));
vars.put(&quot;DEBUG_DiastolicRangeValidationMax&quot;, JSON.stringify(DiastolicRangeValidationMax));
vars.put(&quot;DEBUG_SystolicErrorMessage&quot;, JSON.stringify(SystolicErrorMessage));
vars.put(&quot;DEBUG_DiastolicErrorMessage&quot;, JSON.stringify(DiastolicErrorMessage));

if (SystolicRangeValidationMin == 0 &amp;&amp; SystolicRangeValidationMax == 200 &amp;&amp; DiastolicRangeValidationMin == 0 &amp;&amp; DiastolicRangeValidationMax == 200) {
	prev.setSuccessful(true);     
     prev.setResponseMessage(&quot;SystolicRangeValidationMin: &quot;+SystolicRangeValidationMin+&quot; SystolicRangeValidationMax: &quot; + SystolicRangeValidationMax +&quot; DiastolicRangeValidationMin: &quot;+DiastolicRangeValidationMin+&quot; DiastolicRangeValidationMax: &quot; + DiastolicRangeValidationMax + &quot; Message: &quot;+SystolicErrorMessage + &quot; Message: &quot;+DiastolicErrorMessage);
     }
else {
	prev.setSuccessful(false); 
     prev.setResponseMessage(&quot;Something goes wrong. Recieved an unexpected value&quot;);
     }

</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BLOOD PRESSURE Systolic" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/LoadForm/15303</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BMI Critical High and Low Height  Ranges checking" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);
// Range validation
// Systolic
var SystolicCriticalRangeMin = objects[0].ScreeningItems[1].CriticalReferenceRange[0].RangeMin;
var SystolicCriticalRangeMax = objects[0].ScreeningItems[1].CriticalReferenceRange[0].RangeMax;
var SystolicMessage = objects[0].ScreeningItems[1].CriticalReferenceRange[0].Message;
var SystolicDescription = objects[0].ScreeningItems[1].CriticalReferenceRange[0].Description;

//Show values
vars.put(&quot;DEBUG_SystolicCriticalRangeMin&quot;, JSON.stringify(SystolicCriticalRangeMin));
vars.put(&quot;DEBUG_SystolicCriticalRangeMax&quot;, JSON.stringify(SystolicCriticalRangeMax));
vars.put(&quot;DEBUG_SystolicMessage&quot;, JSON.stringify(SystolicMessage));
vars.put(&quot;DEBUG_SystolicDescription&quot;, JSON.stringify(SystolicDescription));




if (SystolicCriticalRangeMin == 140 &amp;&amp; SystolicCriticalRangeMax == 1000 &amp;&amp; SystolicDescription == &quot;Reference Range for Critical Systolic&quot;) {
	prev.setSuccessful(true);     
     prev.setResponseMessage(&quot;SystolicCriticalRangeMin: &quot;+SystolicCriticalRangeMin+&quot; SystolicCriticalRangeMax: &quot; + SystolicCriticalRangeMax +&quot; Message: &quot;+SystolicMessage);
     }
else {
	prev.setSuccessful(false); 
     prev.setResponseMessage(&quot;Something goes wrong. Recieved an unexpected value&quot;);
     }

</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="TestPlan.comments">Getting  Member screening ids</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BLOOD PRESSURE Diastolic" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/LoadForm/15303</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BLOOD PRESSURE Diastolic" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);

// Diastolic
var DiastolicCriticalRangeMin = objects[0].ScreeningItems[2].CriticalReferenceRange[0].RangeMin;
var DiastolicCriticalRangeMax = objects[0].ScreeningItems[2].CriticalReferenceRange[0].RangeMax;
var DiastolicMessage = objects[0].ScreeningItems[2].CriticalReferenceRange[0].Message;
var DiastolicDescription = objects[0].ScreeningItems[2].CriticalReferenceRange[0].Description;

//Show
vars.put(&quot;DEBUG_DiastolicCriticalRangeMin&quot;, JSON.stringify(DiastolicCriticalRangeMin));
vars.put(&quot;DEBUG_DiastolicCriticalRangeMax&quot;, JSON.stringify(DiastolicCriticalRangeMax));
vars.put(&quot;DEBUG_DiastolicMessage&quot;, JSON.stringify(DiastolicMessage));
vars.put(&quot;DEBUG_DiastolicDescription&quot;, JSON.stringify(DiastolicDescription));


if (DiastolicCriticalRangeMin == 90 &amp;&amp; DiastolicCriticalRangeMax == 999 &amp;&amp; DiastolicDescription == &quot;Reference Range for Critical Diastolic&quot;) {
	prev.setSuccessful(true);     
     prev.setResponseMessage(&quot;DiastolicCriticalRangeMin: &quot;+DiastolicCriticalRangeMin+&quot; DiastolicCriticalRangeMax: &quot;+DiastolicCriticalRangeMax+&quot; Message: &quot;+DiastolicMessage);
     }
else {
	prev.setSuccessful(false); 
     prev.setResponseMessage(&quot;Something goes wrong. Recieved an unexpected value&quot;);
     }

</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="TestPlan.comments">Getting  Member screening ids</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="BONE MINERAL DENSITY" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BONE MINERAL DENSITY" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/LoadForm/15302</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BONE MINERAL DENSITY Range Validation" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);
// Range validation
var BMDRangeValidationMin = objects[0].ScreeningItems[1].RangeValidation.Minimum;
var BMDRangeValidationMax = objects[0].ScreeningItems[1].RangeValidation.Maximum;
var BMDErrorMessage = objects[0].ScreeningItems[1].RangeValidation.ErrorMessage;
var BMDDescription = objects[0].ScreeningItems[1].RangeValidation.Description;
//Show values
vars.put(&quot;DEBUG_BMDRangeValidationMin&quot;, JSON.stringify(BMDRangeValidationMin));
vars.put(&quot;DEBUG_BMDRangeValidationMax&quot;, JSON.stringify(BMDRangeValidationMax));
vars.put(&quot;DEBUG_BMDErrorMessage&quot;, JSON.stringify(BMDErrorMessage));
vars.put(&quot;DEBUG_BMDDescription&quot;, JSON.stringify(BMDDescription));

if (BMDRangeValidationMin == -10 &amp;&amp; BMDRangeValidationMax == 10 &amp;&amp; BMDDescription == &quot;Range Validation for BMD&quot;) {
	prev.setSuccessful(true);     
     prev.setResponseMessage(&quot;BMDRangeValidationMin: &quot;+BMDRangeValidationMin+&quot; BMDRangeValidationMax: &quot; +BMDRangeValidationMax+&quot; Message: &quot;+BMDErrorMessage);
     }
else {
	prev.setSuccessful(false); 
     prev.setResponseMessage(&quot;Something goes wrong. Recieved an unexpected value&quot;);
     }

</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BONE MINERAL DENSITY" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/LoadForm/15302</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BONE MINERAL DENSITY Critical ReferenceRange Validation" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);
// Range validation
var SystolicRangeValidationMin = objects[0].ScreeningItems[1].RangeValidation.Minimum;
var SystolicRangeValidationMax = objects[0].ScreeningItems[1].RangeValidation.Maximum;
var DiastolicRangeValidationMin = objects[0].ScreeningItems[2].RangeValidation.Minimum;
var DiastolicRangeValidationMax = objects[0].ScreeningItems[2].RangeValidation.Maximum;
var SystolicErrorMessage = objects[0].ScreeningItems[1].RangeValidation.ErrorMessage;
var DiastolicErrorMessage = objects[0].ScreeningItems[2].RangeValidation.ErrorMessage;
//Show values
vars.put(&quot;DEBUG_SystolicRangeValidationMin&quot;, JSON.stringify(SystolicRangeValidationMin));
vars.put(&quot;DEBUG_SystolicRangeValidationMax&quot;, JSON.stringify(SystolicRangeValidationMax));
vars.put(&quot;DEBUG_DiastolicRangeValidationMin&quot;, JSON.stringify(DiastolicRangeValidationMin));
vars.put(&quot;DEBUG_DiastolicRangeValidationMax&quot;, JSON.stringify(DiastolicRangeValidationMax));
vars.put(&quot;DEBUG_SystolicErrorMessage&quot;, JSON.stringify(SystolicErrorMessage));
vars.put(&quot;DEBUG_DiastolicErrorMessage&quot;, JSON.stringify(DiastolicErrorMessage));

if (SystolicRangeValidationMin == 0 &amp;&amp; SystolicRangeValidationMax == 200 &amp;&amp; DiastolicRangeValidationMin == 0 &amp;&amp; DiastolicRangeValidationMax == 200) {
	prev.setSuccessful(true);     
     prev.setResponseMessage(&quot;SystolicRangeValidationMin: &quot;+SystolicRangeValidationMin+&quot; SystolicRangeValidationMax: &quot; + SystolicRangeValidationMax +&quot; DiastolicRangeValidationMin: &quot;+DiastolicRangeValidationMin+&quot; DiastolicRangeValidationMax: &quot; + DiastolicRangeValidationMax + &quot; Message: &quot;+SystolicErrorMessage + &quot; Message: &quot;+DiastolicErrorMessage);
     }
else {
	prev.setSuccessful(false); 
     prev.setResponseMessage(&quot;Something goes wrong. Recieved an unexpected value&quot;);
     }

</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SPIROMETRY" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FORCED VITAL CAPACITY (Range Validation)" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/LoadForm/15564</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="FORCED VITAL CAPACITY Range Validation" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);
// Range validation
var SPMRangeValidationMin = objects[0].ScreeningItems[1].RangeValidation.Minimum;
var SPMRangeValidationMax = objects[0].ScreeningItems[1].RangeValidation.Maximum;

var SPMRangeValidationMessage = objects[0].ScreeningItems[1].RangeValidation.ErrorMessage;
var SPMRangeValidationDescription = objects[0].ScreeningItems[1].RangeValidation.Description;
//Show values
vars.put(&quot;DEBUG_SPMRangeValidationMin&quot;, JSON.stringify(SPMRangeValidationMin));
vars.put(&quot;DEBUG_SPMRangeValidationMax&quot;, JSON.stringify(SPMRangeValidationMax));
vars.put(&quot;DEBUG_SPMRangeValidationMessage&quot;, JSON.stringify(SPMRangeValidationMessage));
vars.put(&quot;DEBUG_SPMRangeValidationDescription&quot;, JSON.stringify(SPMRangeValidationDescription));

if (SPMRangeValidationMin == 0 &amp;&amp; SPMRangeValidationMax == 100 &amp;&amp; SPMRangeValidationDescription == &quot;Range Validation for FVC&quot;) {
	prev.setSuccessful(true);     
     prev.setResponseMessage(&quot;SPIROMETRY Range Validation Min: &quot;+SPMRangeValidationMin+&quot; SPIROMETRY Range Validation Max: &quot; +SPMRangeValidationMax+&quot; Message: &quot;+SPMRangeValidationMessage);
     }
else {
	prev.setSuccessful(false); 
     prev.setResponseMessage(&quot;Something goes wrong. Recieved an unexpected value&quot;);
     }

</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FORCED VITAL CAPACITY (Critical Range validation)" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/LoadForm/15564</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="FORCED VITAL CAPACITY (Critical Range validation)" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);
// Range validation
var FVCCriticalRangeValidationMin = objects[0].ScreeningItems[1].CriticalReferenceRange[0].RangeMin;
var FVCCriticalRangeValidationMax = objects[0].ScreeningItems[1].CriticalReferenceRange[0].RangeMax;
//Critical range validation
var FVCRangeValidationMessage = objects[0].ScreeningItems[1].CriticalReferenceRange[0].Message;
var FVCRangeValidationDescription = objects[0].ScreeningItems[1].CriticalReferenceRange[0].Description;

//Show values
vars.put(&quot;DEBUG_FVCCriticalRangeValidationMin&quot;, JSON.stringify(FVCCriticalRangeValidationMin));
vars.put(&quot;DEBUG_FVCCriticalRangeValidationMax&quot;, JSON.stringify(FVCCriticalRangeValidationMax));
vars.put(&quot;DEBUG_FVCRangeValidationMessage&quot;, JSON.stringify(FVCRangeValidationMessage));
vars.put(&quot;DEBUG_FVCRangeValidationDescription&quot;, JSON.stringify(FVCRangeValidationDescription));

if (FVCCriticalRangeValidationMin == 0 &amp;&amp; FVCCriticalRangeValidationMax == 59 &amp;&amp; FVCRangeValidationDescription == &quot;Reference Range for Critical FVC&quot;) {
	prev.setSuccessful(true);     
     prev.setResponseMessage(&quot;FVCCriticalRangeValidationMin: &quot;+FVCCriticalRangeValidationMin+&quot; FVCCriticalRangeValidationMax: &quot; +FVCCriticalRangeValidationMax+&quot; Message: &quot;+FVCRangeValidationMessage);
     }
else {
	prev.setSuccessful(false); 
     prev.setResponseMessage(&quot;Something goes wrong. Recieved an unexpected value&quot;);
     }


</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FORCED VITAL CAPACITY IN SEC. (Range validation" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/LoadForm/15564</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="FORCED VITAL CAPACITY Range Validation" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);
// Range validation
var FVC1RangeValidationMin = objects[0].ScreeningItems[2].RangeValidation.Minimum;
var FVC1RangeValidationMax = objects[0].ScreeningItems[2].RangeValidation.Maximum;

var FVC1RangeValidationMessage = objects[0].ScreeningItems[2].RangeValidation.ErrorMessage;
var FVC1RangeValidationDescription = objects[0].ScreeningItems[2].RangeValidation.Description;
//Show values
vars.put(&quot;DEBUG_FVC1RangeValidationMin&quot;, JSON.stringify(FVC1RangeValidationMin));
vars.put(&quot;DEBUG_FVC1RangeValidationMax&quot;, JSON.stringify(FVC1RangeValidationMax));
vars.put(&quot;DEBUG_FVC1RangeValidationMessage&quot;, JSON.stringify(FVC1RangeValidationMessage));
vars.put(&quot;DEBUG_FVC1RangeValidationDescription&quot;, JSON.stringify(FVC1RangeValidationDescription));

if (FVC1RangeValidationMin == 0 &amp;&amp; FVC1RangeValidationMax == 100 &amp;&amp; FVC1RangeValidationDescription == &quot;Range Validation for FVC1&quot;) {
	prev.setSuccessful(true);     
     prev.setResponseMessage(&quot;FVC1 Range Validation Min: &quot;+FVC1RangeValidationMin+&quot; FVC1 Range Validation Max: &quot; +FVC1RangeValidationMax+&quot; Message: &quot;+FVC1RangeValidationMessage);
     }
else {
	prev.setSuccessful(false); 
     prev.setResponseMessage(&quot;Something goes wrong. Recieved an unexpected value&quot;);
     }

</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FORCED VITAL CAPACITY IN SEC (Critical Range validation" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/LoadForm/15564</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="FORCED VITAL CAPACITY. Critical Range validation" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);
// Range validation
var FEVCriticalRangeValidationMin = objects[0].ScreeningItems[2].CriticalReferenceRange[0].RangeMin;
var FEVCriticalRangeValidationMax = objects[0].ScreeningItems[2].CriticalReferenceRange[0].RangeMax;

var FEVCriticalMessage = objects[0].ScreeningItems[2].CriticalReferenceRange[0].Message;
var FEVCriticalDescription = objects[0].ScreeningItems[2].CriticalReferenceRange[0].Description;
//Show values
vars.put(&quot;DEBUG_FEVCriticalRangeValidationMin&quot;, JSON.stringify(FEVCriticalRangeValidationMin));
vars.put(&quot;DEBUG_FEVCriticalRangeValidationMax&quot;, JSON.stringify(FEVCriticalRangeValidationMax));
vars.put(&quot;DEBUG_FEVCriticalMessage&quot;, JSON.stringify(FEVCriticalMessage));
vars.put(&quot;DEBUG_FEVCriticalDescription&quot;, JSON.stringify(FEVCriticalDescription));

if (FEVCriticalRangeValidationMin == 0 &amp;&amp; FEVCriticalRangeValidationMax == 59 &amp;&amp; FEVCriticalDescription == &quot;Reference Range for Critical FEV1&quot;) {
	prev.setSuccessful(true);     
     prev.setResponseMessage(&quot;FEV CriticalRange Validation Min: &quot;+FEVCriticalRangeValidationMin+&quot; FEV Critical Range Validation Max: &quot; +FEVCriticalRangeValidationMax+&quot; Message: &quot;+FEVCriticalMessage);
     }
else {
	prev.setSuccessful(false); 
     prev.setResponseMessage(&quot;Something goes wrong. Recieved an unexpected value&quot;);
     }

</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FVC Ratio (formula checking)" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/LoadForm/15564</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="FORCED VITAL CAPACITY. Critical Range validation" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);
// Range validation
var FVCFormula = objects[0].ScreeningItems[3].Formula;
//Show values
vars.put(&quot;DEBUG_FVCFormula&quot;, JSON.stringify(FVCFormula));

if (FVCFormula == &quot;(({217}/{216})*100)&quot;) {
	prev.setSuccessful(true);     
     prev.setResponseMessage(&quot;FVCFormula: recieved correct formula &quot;+FVCFormula);
     }
else {
	prev.setSuccessful(false); 
     prev.setResponseMessage(&quot;Something goes wrong. Recieved an unexpected value &quot;);
     }

</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Screenings.Save form" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1424347050000</longProp>
        <longProp name="ThreadGroup.end_time">1424347050000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CHOLESTEROL SAVE FORM" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15473,&#xd;
        &quot;MeasureID&quot;: &quot;86&quot;,&#xd;
        &quot;MeasureValue&quot;: &quot;1&quot;,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T10:50:17&quot;&#xd;
    },&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15473,&#xd;
        &quot;MeasureID&quot;: &quot;88&quot;,&#xd;
        &quot;MeasureValue&quot;: &quot;-12&quot;,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T10:50:17&quot;&#xd;
    },&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15473,&#xd;
        &quot;MeasureID&quot;: &quot;90&quot;,&#xd;
        &quot;MeasureValue&quot;: &quot;250&quot;,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T10:50:17&quot;&#xd;
    },&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15473,&#xd;
        &quot;MeasureID&quot;: &quot;91&quot;,&#xd;
        &quot;MeasureValue&quot;: &quot;13&quot;,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T10:50:17&quot;&#xd;
    },&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15473,&#xd;
        &quot;MeasureID&quot;: &quot;89&quot;,&#xd;
        &quot;MeasureValue&quot;: &quot;10&quot;,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T10:50:17&quot;&#xd;
    },&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15473,&#xd;
        &quot;MeasureID&quot;: &quot;92&quot;,&#xd;
        &quot;MeasureValue&quot;: &quot;0&quot;,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T10:50:17&quot;&#xd;
    },&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15473,&#xd;
        &quot;MeasureID&quot;: &quot;93&quot;,&#xd;
        &quot;MeasureValue&quot;: &quot;0&quot;,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T10:50:17&quot;&#xd;
    },&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15473,&#xd;
        &quot;MeasureID&quot;: &quot;99&quot;,&#xd;
        &quot;MeasureValue&quot;: null,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T10:50:17&quot;&#xd;
    }&#xd;
]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/SaveForm/15473</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody.RangeValidation);


var ids = []; 								  //создаем массив
for(var i in objects) {				// i - ключ массива, перебираем все значения по порядку
	ids.push(objects[i].RangeValidation);		 //Помещаем переменную в массив
}




vars.put(&quot;DEBUG_RangeValidation&quot;, JSON.stringify(ids));
vars.putObject(&quot;RangeValidation&quot;, ids);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Getting  Member screening ids</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1333845646">is Invalid value</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EXPECTED RESULTS SAVE FORM" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15474,&#xd;
        &quot;MeasureID&quot;: &quot;101&quot;,&#xd;
        &quot;MeasureValue&quot;: &quot;1&quot;,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T10:52:32&quot;&#xd;
    },&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15474,&#xd;
        &quot;MeasureID&quot;: &quot;104&quot;,&#xd;
        &quot;MeasureValue&quot;: &quot;1&quot;,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T10:52:32&quot;&#xd;
    },&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15474,&#xd;
        &quot;MeasureID&quot;: &quot;109&quot;,&#xd;
        &quot;MeasureValue&quot;: &quot;1&quot;,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T10:52:32&quot;&#xd;
    },&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15474,&#xd;
        &quot;MeasureID&quot;: &quot;115&quot;,&#xd;
        &quot;MeasureValue&quot;: &quot;2&quot;,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T10:52:32&quot;&#xd;
    },&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15474,&#xd;
        &quot;MeasureID&quot;: &quot;120&quot;,&#xd;
        &quot;MeasureValue&quot;: &quot;2&quot;,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T10:52:32&quot;&#xd;
    },&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15474,&#xd;
        &quot;MeasureID&quot;: &quot;127&quot;,&#xd;
        &quot;MeasureValue&quot;: &quot;4&quot;,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T10:52:32&quot;&#xd;
    },&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15474,&#xd;
        &quot;MeasureID&quot;: &quot;131&quot;,&#xd;
        &quot;MeasureValue&quot;: &quot;3&quot;,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T10:52:32&quot;&#xd;
    },&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15474,&#xd;
        &quot;MeasureID&quot;: &quot;133&quot;,&#xd;
        &quot;MeasureValue&quot;: &quot;0&quot;,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T10:52:32&quot;&#xd;
    }&#xd;
]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/SaveForm/15474</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);


var ids = []; 								  //создаем массив
for(var i in objects) {				// i - ключ массива, перебираем все значения по порядку
	ids.push(objects[i].MeasureValue);		 //Помещаем переменную в массив
}


vars.put(&quot;MeasureValues_DEBUG&quot;, JSON.stringify(ids));
vars.putObject(&quot;MeasureValues&quot;, ids);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Getting  Member screening ids</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1333845646">is Invalid value</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GLUCOSE SAVE FORM" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15300,&#xd;
        &quot;MeasureID&quot;: &quot;139&quot;,&#xd;
        &quot;MeasureValue&quot;: &quot;1&quot;,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T11:33:41&quot;&#xd;
    },&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15300,&#xd;
        &quot;MeasureID&quot;: &quot;141&quot;,&#xd;
        &quot;MeasureValue&quot;: &quot;12&quot;,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T11:33:41&quot;&#xd;
    },&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15300,&#xd;
        &quot;MeasureID&quot;: &quot;143&quot;,&#xd;
        &quot;MeasureValue&quot;: &quot;1&quot;,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T11:33:41&quot;&#xd;
    },&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15300,&#xd;
        &quot;MeasureID&quot;: &quot;145&quot;,&#xd;
        &quot;MeasureValue&quot;: &quot;11&quot;,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T11:33:41&quot;&#xd;
    },&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15300,&#xd;
        &quot;MeasureID&quot;: &quot;150&quot;,&#xd;
        &quot;MeasureValue&quot;: &quot;4&quot;,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T11:33:41&quot;&#xd;
    },&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15300,&#xd;
        &quot;MeasureID&quot;: &quot;153&quot;,&#xd;
        &quot;MeasureValue&quot;: null,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T11:33:41&quot;&#xd;
    }&#xd;
]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/SaveForm/15300</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);


var ids = []; 								  //создаем массив
for(var i in objects) {				// i - ключ массива, перебираем все значения по порядку
	ids.push(objects[i].MeasureValue);		 //Помещаем переменную в массив
}


vars.put(&quot;MeasureValues_DEBUG&quot;, JSON.stringify(ids));
vars.putObject(&quot;MeasureValues&quot;, ids);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Getting  Member screening ids</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1333845646">is Invalid value</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HEMOGLOBIN SAVE FORM" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15306,&#xd;
        &quot;MeasureID&quot;: &quot;155&quot;,&#xd;
        &quot;MeasureValue&quot;: &quot;1&quot;,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T11:34:50&quot;&#xd;
    },&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15306,&#xd;
        &quot;MeasureID&quot;: &quot;157&quot;,&#xd;
        &quot;MeasureValue&quot;: &quot;7&quot;,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T11:34:50&quot;&#xd;
    },&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15306,&#xd;
        &quot;MeasureID&quot;: &quot;161&quot;,&#xd;
        &quot;MeasureValue&quot;: &quot;3&quot;,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T11:34:50&quot;&#xd;
    },&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15306,&#xd;
        &quot;MeasureID&quot;: &quot;164&quot;,&#xd;
        &quot;MeasureValue&quot;: null,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T11:34:50&quot;&#xd;
    }&#xd;
]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/SaveForm/15306</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);


var ids = []; 								  //создаем массив
for(var i in objects) {				// i - ключ массива, перебираем все значения по порядку
	ids.push(objects[i].MeasureValue);		 //Помещаем переменную в массив
}


vars.put(&quot;MeasureValues_DEBUG&quot;, JSON.stringify(ids));
vars.putObject(&quot;MeasureValues&quot;, ids);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Getting  Member screening ids</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1333845646">is Invalid value</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="NEPHROPATHY SAVE FORM" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15305,&#xd;
        &quot;MeasureID&quot;: &quot;166&quot;,&#xd;
        &quot;MeasureValue&quot;: &quot;1&quot;,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T11:35:57&quot;&#xd;
    },&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15305,&#xd;
        &quot;MeasureID&quot;: &quot;168&quot;,&#xd;
        &quot;MeasureValue&quot;: &quot;100&quot;,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T11:35:57&quot;&#xd;
    },&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15305,&#xd;
        &quot;MeasureID&quot;: &quot;169&quot;,&#xd;
        &quot;MeasureValue&quot;: &quot;0&quot;,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T11:35:57&quot;&#xd;
    },&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15305,&#xd;
        &quot;MeasureID&quot;: &quot;175&quot;,&#xd;
        &quot;MeasureValue&quot;: null,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T11:35:57&quot;&#xd;
    }&#xd;
]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/SaveForm/15305</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);


var ids = []; 								  //создаем массив
for(var i in objects) {				// i - ключ массива, перебираем все значения по порядку
	ids.push(objects[i].MeasureValue);		 //Помещаем переменную в массив
}


vars.put(&quot;MeasureValues_DEBUG&quot;, JSON.stringify(ids));
vars.putObject(&quot;MeasureValues&quot;, ids);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Getting  Member screening ids</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1333845646">is Invalid value</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BODY MASS INDEX SAVE FORM" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15304,&#xd;
        &quot;MeasureID&quot;: &quot;177&quot;,&#xd;
        &quot;MeasureValue&quot;: &quot;1&quot;,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T11:37:26&quot;&#xd;
    },&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15304,&#xd;
        &quot;MeasureID&quot;: &quot;180&quot;,&#xd;
        &quot;MeasureValue&quot;: &quot;230&quot;,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T11:37:26&quot;&#xd;
    },&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15304,&#xd;
        &quot;MeasureID&quot;: &quot;179&quot;,&#xd;
        &quot;MeasureValue&quot;: &quot;76&quot;,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T11:37:26&quot;&#xd;
    },&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15304,&#xd;
        &quot;MeasureID&quot;: &quot;181&quot;,&#xd;
        &quot;MeasureValue&quot;: &quot;27.99&quot;,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T11:37:26&quot;&#xd;
    },&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15304,&#xd;
        &quot;MeasureID&quot;: &quot;182&quot;,&#xd;
        &quot;MeasureValue&quot;: &quot;0&quot;,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T11:37:26&quot;&#xd;
    },&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15304,&#xd;
        &quot;MeasureID&quot;: &quot;188&quot;,&#xd;
        &quot;MeasureValue&quot;: null,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T11:37:26&quot;&#xd;
    }&#xd;
]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/SaveForm/15304</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);


var ids = []; 								  //создаем массив
for(var i in objects) {				// i - ключ массива, перебираем все значения по порядку
	ids.push(objects[i].MeasureValue);		 //Помещаем переменную в массив
}


vars.put(&quot;MeasureValues_DEBUG&quot;, JSON.stringify(ids));
vars.putObject(&quot;MeasureValues&quot;, ids);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Getting  Member screening ids</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1333845646">is Invalid value</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BLOOD PRESSURE SAVE FORM" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15303,&#xd;
        &quot;MeasureID&quot;: &quot;190&quot;,&#xd;
        &quot;MeasureValue&quot;: &quot;1&quot;,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T11:38:00&quot;&#xd;
    },&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15303,&#xd;
        &quot;MeasureID&quot;: &quot;192&quot;,&#xd;
        &quot;MeasureValue&quot;: &quot;120&quot;,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T11:38:00&quot;&#xd;
    },&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15303,&#xd;
        &quot;MeasureID&quot;: &quot;193&quot;,&#xd;
        &quot;MeasureValue&quot;: &quot;80&quot;,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T11:38:00&quot;&#xd;
    },&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15303,&#xd;
        &quot;MeasureID&quot;: &quot;194&quot;,&#xd;
        &quot;MeasureValue&quot;: &quot;0&quot;,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T11:38:00&quot;&#xd;
    },&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15303,&#xd;
        &quot;MeasureID&quot;: &quot;201&quot;,&#xd;
        &quot;MeasureValue&quot;: null,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T11:38:00&quot;&#xd;
    }&#xd;
]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/SaveForm/15303</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);


var ids = []; 								  //создаем массив
for(var i in objects) {				// i - ключ массива, перебираем все значения по порядку
	ids.push(objects[i].MeasureValue);		 //Помещаем переменную в массив
}


vars.put(&quot;MeasureValues_DEBUG&quot;, JSON.stringify(ids));
vars.putObject(&quot;MeasureValues&quot;, ids);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Getting  Member screening ids</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1333845646">is Invalid value</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BONE MINERAL DENSITY SAVE FORM" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15302,&#xd;
        &quot;MeasureID&quot;: &quot;203&quot;,&#xd;
        &quot;MeasureValue&quot;: &quot;1&quot;,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T11:39:07&quot;&#xd;
    },&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15302,&#xd;
        &quot;MeasureID&quot;: &quot;205&quot;,&#xd;
        &quot;MeasureValue&quot;: &quot;-8&quot;,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T11:39:07&quot;&#xd;
    },&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15302,&#xd;
        &quot;MeasureID&quot;: &quot;208&quot;,&#xd;
        &quot;MeasureValue&quot;: &quot;2&quot;,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T11:39:07&quot;&#xd;
    },&#xd;
    {&#xd;
        &quot;MemberScreeningID&quot;: 15302,&#xd;
        &quot;MeasureID&quot;: &quot;212&quot;,&#xd;
        &quot;MeasureValue&quot;: null,&#xd;
        &quot;CreatedDate&quot;: &quot;2015-02-16T11:39:07&quot;&#xd;
    }&#xd;
]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${screeningpath}/MemberScreening/SaveForm/15302</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);


var ids = []; 								  //создаем массив
for(var i in objects) {				// i - ключ массива, перебираем все значения по порядку
	ids.push(objects[i].MeasureValue);		 //Помещаем переменную в массив
}


vars.put(&quot;MeasureValues_DEBUG&quot;, JSON.stringify(ids));
vars.putObject(&quot;MeasureValues&quot;, ids);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Getting  Member screening ids</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1333845646">is Invalid value</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Get results document" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1413966492000</longProp>
        <longProp name="ThreadGroup.end_time">1413966492000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${Login}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Getting authorization key for the next steps</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;sessionKey&quot;, serializedJSONBody.SessionKey);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-670529065">Invalid</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Screening Results document" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">biomtst.upmchp.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/BiometricMemberService/MemberScreeningResults/1598</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-948798139">MemberKey</stringProp>
              <stringProp name="-1268130343">MemberDocId</stringProp>
              <stringProp name="1673239897">MemberDocumentEncoded</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Check out member" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1413967312000</longProp>
        <longProp name="ThreadGroup.end_time">1413967312000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${Login}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Getting authorization key for the next steps</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;sessionKey&quot;, serializedJSONBody.SessionKey);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-670529065">Invalid</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting All open events" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="StaffID" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">StaffID</stringProp>
                <stringProp name="Argument.value">${StaffID}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/Events/Allopenevents/Staff</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);


var ids = []; 								  	
for(var i in objects) {						  	
	ids.push(objects[i].EventID);		  	
}

vars.putObject(&quot;EventIDs&quot;, ids);
vars.put(&quot;Loop&quot;, ids.length);

vars.put(&quot;DEBUG_EventIDs&quot;, JSON.stringify(ids));


var args = vars.getObject(&quot;EventIDs&quot;);
var randomElement=Math.floor(Math.random() * args.length);

vars.put(&quot;RandomEventID&quot;, args[randomElement]);
</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Собираем все айдишники ивентов в массив, берем произвольный</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Checked In Members" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/BiometricMemberService/CheckedInMembers/Event/${RandomEventID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var objects = JSON.parse(json.serializedJSONBody);

vars.putObject(&quot;MemberKeys&quot;, objects);		  

var Keys = [];
for(var i in objects) {
		Keys.push(objects[i].MemberKey);		
}
Keys.sort();

vars.putObject(&quot;MemberIDs&quot;, Keys);
vars.put(&quot;Debug_MemberKeys&quot;, JSON.stringify(Keys));   


var args = vars.getObject(&quot;MemberIDs&quot;);
var randomElement=Math.floor(Math.random() * args.length);

vars.put(&quot;RandomMember&quot;, args[randomElement]); </stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">${RandomMember} !== undefined</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check Out Member" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">biomtst.upmchp.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/BiometricMemberService/CheckOutMember/Member/${RandomMember}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
if(json.serializedJSONBody != &quot;&quot;) {
	var Response = JSON.parse(json.serializedJSONBody);
}
var ErrorMessage = json._ErrorMessages[0];
var SuccessMessage = json._SuccessMessages[0];


if (ErrorMessage == &quot;Please complete all the assigned screenings before Checking Out.&quot;) {  
       prev.setSuccessful(true);
	  prev.setResponseMessage(&quot;Please complete all the assigned screenings before Checking Out.&quot;);
}
else if (ErrorMessage == &quot;Please CheckIn member before Checking Out.&quot;) {
	  prev.setSuccessful(true);
	  prev.setResponseMessage(&quot;Please CheckIn member before Checking Out.&quot;);
}
else if (Response === undefined) {
	  prev.setSuccessful(false);
	  prev.setResponseMessage(&quot;Something goes wrong. Maybe MemberID had lost&quot;);
}
else {
	  prev.setSuccessful(true);
	  prev.setResponseMessage(&quot;The member was checked out successfully&quot;);
}</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Report administration" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1414590550000</longProp>
        <longProp name="ThreadGroup.end_time">1414590550000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${Login}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Getting authorization key for the next steps</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;sessionKey&quot;, serializedJSONBody.SessionKey);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-670529065">Invalid</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting Event Types" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/EventTypes</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting list of Roles" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${userpath}/Roles</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting Interval Times" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/IntervalTimes</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting Staff Organizations" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/Staff/Organizations</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Getting Provider Service " enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/BiometricProviderService/Providers</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${servicepath}/Locations" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/Locations</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Report administration. Events view getting information" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/Events/AllOpenEvents/Staff/Organization/0</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/BiometricReportingService/EventReportTypes/Event/2" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/BiometricReportingService/EventReportTypes/Event/2</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/BiometricReportingService/EventReport/Event/2/ReportType/1" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/BiometricReportingService/EventReport/Event/2/ReportType/1</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/Views/Images/UPMCHPHeader.png" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/Views/Images/UPMCHPHeader.png</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/Views/Styles/Main.css" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/Views/Styles/Main.css</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Add members from the Search" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1413909742000</longProp>
        <longProp name="ThreadGroup.end_time">1413909742000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${Login}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Getting authorization key for the next steps</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;sessionKey&quot;, serializedJSONBody.SessionKey);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1037686455">Invalid Username or password</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Event adding" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${NewEvent}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">biomtst.upmchp.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/Event/Add?</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Create new event.</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;EventID&quot;, serializedJSONBody.EventID);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="TestPlan.comments">Getting event id and transfering it to variable</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="288150805">EventID</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Assign Staffs To Event" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[{&quot;StaffID&quot;:9,&quot;FirstName&quot;:&quot;&quot;,&quot;LastName&quot;:&quot;&quot;,&quot;MiddleName&quot;:&quot;&quot;,&quot;FullName&quot;:&quot;&quot;,&quot;OrganizationUnitID&quot;:0,&quot;OrganizationUnitName&quot;:null,&quot;EventID&quot;:49}]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">biomtst.upmchp.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/AssignStaffsToEvent/EventId/${EventID}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Assign staff to</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="544818101">Access is denied</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Assign Screenings To Event" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[{&quot;ScreeningID&quot;:7,&quot;Description&quot;:&quot;Cholesterol&quot;,&quot;ScreeningName&quot;:&quot;Cholesterol&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:0},{&quot;ScreeningID&quot;:8,&quot;Description&quot;:&quot;Expected Results&quot;,&quot;ScreeningName&quot;:&quot;Expected Results&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:1},{&quot;ScreeningID&quot;:9,&quot;Description&quot;:&quot;Expected Results&quot;,&quot;ScreeningName&quot;:&quot;Glucose&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:2},{&quot;ScreeningID&quot;:10,&quot;Description&quot;:&quot;Glucose Note List&quot;,&quot;ScreeningName&quot;:&quot;Hemoglobin&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:3},{&quot;ScreeningID&quot;:11,&quot;Description&quot;:&quot;Nephropathy&quot;,&quot;ScreeningName&quot;:&quot;Nephropathy&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:4},{&quot;ScreeningID&quot;:12,&quot;Description&quot;:&quot;Body Mass Index&quot;,&quot;ScreeningName&quot;:&quot;Body Mass Index&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:5},{&quot;ScreeningID&quot;:13,&quot;Description&quot;:&quot;Blood Pressure&quot;,&quot;ScreeningName&quot;:&quot;Blood Pressure&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:6},{&quot;ScreeningID&quot;:14,&quot;Description&quot;:&quot;Bone Mineral Density&quot;,&quot;ScreeningName&quot;:&quot;Bone Mineral Density&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:7},{&quot;ScreeningID&quot;:15,&quot;Description&quot;:&quot;Spirometry&quot;,&quot;ScreeningName&quot;:&quot;Spirometry&quot;,&quot;EventID&quot;:${EventID},&quot;SortOrder&quot;:8}]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">biomtst.upmchp.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">${servicepath}/AssignScreeningsToEvent/EventId/${EventID}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="544818101">Access is denied</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1373468489">EventScreeningID</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Search Members" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="LastName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">LastName</stringProp>
                <stringProp name="Argument.value">So</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${memberpath}/Search/HPMembers</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var Members = JSON.parse(json.serializedJSONBody);

vars.putObject(&quot;Members&quot;, Members);
vars.put(&quot;MembersCount&quot;, Members.length);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${MembersCount}</stringProp>
        </LoopController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">0</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">Step</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add walk-in" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;AddressIncorrect&quot;:0,&quot;ScheduledTime&quot;:&quot;2014-11-13T11:24:24&quot;,&quot;WalkIn&quot;:&quot;1&quot;,&quot;ExternalEventId&quot;:&quot;&quot;,&quot;DoNotSendResultsToMyProvider&quot;:0,&quot;ContactPreference&quot;:&quot;No&quot;,&quot;MemberId&quot;:&quot;000417084&quot;,&quot;MemberName&quot;:&quot;O&quot;,&quot;PHU&quot;,&quot;FirstName&quot;:&quot;PHU&quot;,&quot;LastName&quot;:&quot;O&quot;,&quot;Gender&quot;:&quot;M&quot;,&quot;Dob&quot;:&quot;1973-10-15T00:00:00&quot;,&quot;Address1&quot;:&quot;6315 KENTUCKY AVENUE&quot;,&quot;Address2&quot;:&quot;&quot;,&quot;State&quot;:&quot;PA&quot;,&quot;City&quot;:&quot;PITTSBURGH&quot;,&quot;ZipCode&quot;:&quot;15206&quot;,&quot;Email&quot;:&quot;&quot;,&quot;Phone&quot;:&quot;&quot;,&quot;EventID&quot;:49}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${memberpath}/Member?</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="BSF PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var Members = vars.getObject(&quot;Members&quot;),
    Step = vars.get(&quot;Step&quot;),
    Member = Members[Step];

vars.put(&quot;MemberFirstName&quot;, Member.FirstName);
vars.put(&quot;MemberLastName&quot;, Member.LastName);
vars.put(&quot;MemberId&quot;, Member.MemberId);
vars.put(&quot;ResponseMember&quot;, JSON.stringify(Member));

</stringProp>
            </BSFPreProcessor>
            <hashTree/>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">/*eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;MemberKey&quot;, serializedJSONBody.MemberKey);
var step = vars.get(&quot;Step&quot;);
step = ParseInt(step) +1;
vars.put(&quot;Step&quot;, step);*/</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </BSFPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2095687439">JUHOON</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Incorrect Login" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1413909742000</longProp>
        <longProp name="ThreadGroup.end_time">1413909742000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Incorrect Login" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${IncorrectLogin2}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Wrong Username and password</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
//vars.put(&quot;ErrorMessage&quot;, json._ErrorMessages[0]);

var ErrorMessage = json._ErrorMessages[0];
if (ErrorMessage == &quot;Unable to Authenticate, please contact your system administrator.&quot;) {  //сравниваем переменные в памяти Javascript
       prev.setSuccessful(true);      			// Если значения не совпадают, то запрос не фейлится
	  prev.setResponseMessage(&quot;Invalid Username or password. Unable to Authenticate, please contact your system administrator.&quot;); // Иначе, видим сообщение, о том, что все OK)

}
else {
 	  prev.setResponseMessage(&quot;Your accout has been locked&quot;); // Иначе, видим сообщение, о том, что все OK)	
} </stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Register member without assigned screenings and signed Docs" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1423670832000</longProp>
        <longProp name="ThreadGroup.end_time">1423670832000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${Login}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Getting authorization key for the next steps</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
var serializedJSONBody = JSON.parse(json.serializedJSONBody);
vars.put(&quot;sessionKey&quot;, serializedJSONBody.SessionKey);</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CheckIn Member (without assigned screenings and signed Docs)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${memberpath}/CheckInMember/Member/2536</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Подходящий мембер просто выбран из списка</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
//vars.put(&quot;ErrorMessage&quot;, json._ErrorMessages[0]);

var ErrorMessage = json._ErrorMessages[0];
if (ErrorMessage == &quot;Atleast one screening need to be assigned.&quot;) {  //сравниваем переменные в памяти Javascript
       prev.setSuccessful(true);      			// Если значения не совпадают, то запрос не фейлится
	  prev.setResponseMessage(&quot;Atleast one screening need to be assigned.&quot;); // Иначе, видим сообщение, о том, что все OK)

}
else {
 	  prev.setResponseMessage(&quot;Something goes wrong&quot;); // Иначе, видим сообщение, о том, что все OK)	
} </stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CheckIn Member (without signed Docs, but with assigned screenings)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${memberpath}/CheckInMember/Member/2540</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Подходящий мембер просто выбран из списка</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
//vars.put(&quot;ErrorMessage&quot;, json._ErrorMessages[0]);

var ErrorMessage = json._ErrorMessages[0];
if (ErrorMessage == &quot;Please sign all the required documents&quot;) {  //сравниваем переменные в памяти Javascript
       prev.setSuccessful(true);      			// Если значения не совпадают, то запрос не фейлится
	  prev.setResponseMessage(&quot;Please sign all the required documents&quot;); // Иначе, видим сообщение, о том, что все OK)

}
else {
 	  prev.setResponseMessage(&quot;Something goes wrong&quot;); // Иначе, видим сообщение, о том, что все OK)	
} </stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CheckIn Member (without assigned screenings, but with signed Docs)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${memberpath}/CheckInMember/Member/2541</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="TestPlan.comments">Подходящий мембер просто выбран из списка</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">eval(&apos;var json = &apos; + prev.getResponseDataAsString());
//vars.put(&quot;ErrorMessage&quot;, json._ErrorMessages[0]);

var ErrorMessage = json._ErrorMessages[0];
if (ErrorMessage == &quot;Atleast one screening need to be assigned.&quot;) {  //сравниваем переменные в памяти Javascript
       prev.setSuccessful(true);      			// Если значения не совпадают, то запрос не фейлится
	  prev.setResponseMessage(&quot;Atleast one screening need to be assigned.&quot;); // Иначе, видим сообщение, о том, что все OK)

}
else {
 	  prev.setResponseMessage(&quot;Something goes wrong&quot;); // Иначе, видим сообщение, о том, что все OK)	
} </stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
